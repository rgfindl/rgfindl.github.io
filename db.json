{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/aws-git-credentials.png","path":"images/aws-git-credentials.png","modified":1,"renderable":0},{"_id":"source/images/finpics-01.jpg","path":"images/finpics-01.jpg","modified":1,"renderable":0},{"_id":"source/images/finpics-02.jpg","path":"images/finpics-02.jpg","modified":1,"renderable":0},{"_id":"source/images/aws-permissions.png","path":"images/aws-permissions.png","modified":1,"renderable":0},{"_id":"source/images/finpics-04.png","path":"images/finpics-04.png","modified":1,"renderable":0},{"_id":"themes/again/source/css/app.scss","path":"css/app.scss","modified":1,"renderable":1},{"_id":"themes/again/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/again/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/again/source/images/banner-small.png","path":"images/banner-small.png","modified":1,"renderable":1},{"_id":"themes/again/source/images/william-iven-5893-small.jpg","path":"images/william-iven-5893-small.jpg","modified":1,"renderable":1},{"_id":"themes/again/source/images/banner-large.png","path":"images/banner-large.png","modified":1,"renderable":1},{"_id":"themes/again/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/again/source/images/william-iven-5893.jpg","path":"images/william-iven-5893.jpg","modified":1,"renderable":1},{"_id":"source/images/finpics-03.png","path":"images/finpics-03.png","modified":1,"renderable":0},{"_id":"themes/again/source/images/domenico-loia-272251.jpg","path":"images/domenico-loia-272251.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b2f540e6c2bb5b6aeb97d956d074c8c9ac00f296","modified":1502110193000},{"_id":"themes/again/.DS_Store","hash":"c0486e2ead1fa0673c43e5d6e51cd72561be4e2f","modified":1502110193000},{"_id":"themes/again/README.md","hash":"74eb9742c34d3630da066905bb955f249b9be1df","modified":1481550260000},{"_id":"themes/again/_config.yml","hash":"3f18d00d91d96fc175041d597e4c64bbe1c2e44d","modified":1502110330000},{"_id":"source/_posts/static-website-cloudformation-template.md","hash":"6f8dab10ba6c10de166727a333ad140bde69c49d","modified":1502137760000},{"_id":"source/_posts/rekognize-your-serverless-photo-album.md","hash":"eb0c9f0f58aeb2f36f404a1c6375eae9925b35a1","modified":1502137619000},{"_id":"source/images/aws-git-credentials.png","hash":"5ae92000e7408a33497638962289ed24e1372002","modified":1502134715000},{"_id":"source/images/finpics-01.jpg","hash":"82a7643b45f69cfadd556dae4c9557a16f53e30e","modified":1482265980000},{"_id":"themes/again/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1481550260000},{"_id":"themes/again/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1481550260000},{"_id":"source/images/finpics-02.jpg","hash":"7d0bf00b942ac416d1d1d9d7102b25d2dd9324ad","modified":1482265561000},{"_id":"themes/again/.git/index","hash":"6656b6737c2ce86205483fa9b0d02d9f5b0acd80","modified":1502110306000},{"_id":"themes/again/.git/packed-refs","hash":"a49162f50f6f47707fd2ed4e99ec9bafee24dda7","modified":1481550260000},{"_id":"themes/again/layout/.DS_Store","hash":"36d2511c7d7ef46804d5643b07adbefb76dda7c6","modified":1483110070000},{"_id":"source/images/aws-permissions.png","hash":"8d84f8e5fa1fa70c8ba0f5983fe030b8fead501e","modified":1502134697000},{"_id":"themes/again/layout/archive.ejs","hash":"1f8724a48ab2ef61182b8a930e3998f833eb1487","modified":1481550260000},{"_id":"themes/again/layout/index.ejs","hash":"b87edba726df46b991bcaa153c1a222080f991e9","modified":1481550260000},{"_id":"themes/again/layout/page.ejs","hash":"b1c9235cd9ccff78c4dc15608a708e4a74433d46","modified":1481550260000},{"_id":"themes/again/layout/layout.ejs","hash":"bfe888472313a2edc8b7db3190b1802d580fc2bd","modified":1481550260000},{"_id":"themes/again/.git/config","hash":"08e0b6b92c013d0b238258d3c3087e767acade11","modified":1481550260000},{"_id":"themes/again/layout/post.ejs","hash":"fa55c7bed8d3ac20e3911140d5252b9184ca3b14","modified":1481550260000},{"_id":"source/images/finpics-04.png","hash":"2658e1555d6ac635dbc26e3fa66a232748dc2e05","modified":1482436172000},{"_id":"themes/again/source/.DS_Store","hash":"b14750b3469ba2f76703d9c7c1c7aea3778faaef","modified":1502111408000},{"_id":"themes/again/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1481550260000},{"_id":"themes/again/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1481550260000},{"_id":"themes/again/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1481550260000},{"_id":"themes/again/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1481550260000},{"_id":"themes/again/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1481550260000},{"_id":"themes/again/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1481550260000},{"_id":"themes/again/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1481550260000},{"_id":"themes/again/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1481550260000},{"_id":"themes/again/.git/logs/HEAD","hash":"9a11c55f166a803330aafcdfd1e56fac290fa746","modified":1481550260000},{"_id":"themes/again/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1481550260000},{"_id":"themes/again/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1481550260000},{"_id":"themes/again/layout/_partial/article.ejs","hash":"b65d93599fa7e18af428f31027e915209f1a8c8c","modified":1481550260000},{"_id":"themes/again/layout/_partial/footer.ejs","hash":"28f6f7a7fe04cd9161d222b603d29dc5cda72cc6","modified":1502110858000},{"_id":"themes/again/layout/_partial/header.ejs","hash":"9c5833d8dfeb02191e642af9bcb953bb445abc92","modified":1502110828000},{"_id":"themes/again/layout/_partial/head.ejs","hash":"9af034b15cc4274026474e927beadaf72ef52caa","modified":1502112248000},{"_id":"themes/again/layout/_partial/index.ejs","hash":"bf9208ec37b0882698d004895631488061f5593e","modified":1481550260000},{"_id":"themes/again/layout/_partial/nav.ejs","hash":"9145acd2c9f3fcb5d1ed3d63ad6ad4b8a075b734","modified":1481550260000},{"_id":"themes/again/layout/_widget/back-to-home.ejs","hash":"6d3544def976676e38e10134cae071f44bbf67d7","modified":1481550260000},{"_id":"themes/again/layout/_widget/disqus.ejs","hash":"47eb63418da61245bf674cb1764419c2741e486b","modified":1481550260000},{"_id":"themes/again/layout/_widget/paginator.ejs","hash":"ed04dbcb0cc79733ac338c3fc2a8604d41eb0848","modified":1481550260000},{"_id":"themes/again/layout/_widget/sharing.ejs","hash":"8d50310cae2bd6531a3ba04b5c5188c616035359","modified":1481550260000},{"_id":"themes/again/layout/_widget/twitter.ejs","hash":"b2346dc3c538f7ba41c67bac3956c4a1df681a4e","modified":1482242790000},{"_id":"themes/again/layout/_partial/archive.ejs","hash":"394b6f97a6860fe2e027fd0410e24187f9970d5a","modified":1481550260000},{"_id":"themes/again/source/css/_base.scss","hash":"efeb11d16ab4cf79e67ffac179e41ddfba82aac0","modified":1481550260000},{"_id":"themes/again/source/css/_font.scss","hash":"bb4fa3dd6afb2b68214036db078e2ae4d3be5aa4","modified":1502112099000},{"_id":"themes/again/source/css/_variables.scss","hash":"bf87d4c4d61b1063175c7f6b4addb15f4c806921","modified":1482325054000},{"_id":"themes/again/source/css/app.scss","hash":"7b466635119bfb88c54532f4f88b8f824b5a6666","modified":1481550260000},{"_id":"themes/again/source/js/app.js","hash":"8e00097211a064209ae0e9fb556920673f5b9a42","modified":1481550260000},{"_id":"themes/again/source/images/avatar.png","hash":"60d81ac876c5c4aa0e92dbed5abcdbed357c2bf4","modified":1481550260000},{"_id":"themes/again/source/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1481550260000},{"_id":"themes/again/source/images/william-iven-5893-small.jpg","hash":"c140e1fb9d9c2f99848cc9d79f5dec96af4977d9","modified":1502110321000},{"_id":"themes/again/.git/refs/heads/master","hash":"874843a486edd0e72e1e7d7e09fc0c7cd8bca61b","modified":1481550260000},{"_id":"themes/again/.git/objects/pack/pack-8b7cefb21652ced896f5912afd8ec9527a5c61ff.idx","hash":"f8691c9846fbcff3fe2608d92db01c6cb499c6a5","modified":1481550260000},{"_id":"themes/again/source/css/_helper/grid.scss","hash":"d290e1315dc8dc3509e26fb5e4ff55eb277e6e84","modified":1481550260000},{"_id":"themes/again/source/css/_helper/index.scss","hash":"8c35cff7ea4785042f6116f28b09ea8ffc087255","modified":1481550260000},{"_id":"themes/again/source/css/_partial/archive.scss","hash":"b358e1a0e51ebea6ea5aee80447644baaa463723","modified":1481550260000},{"_id":"themes/again/source/css/_partial/footer.scss","hash":"f1ecaa07e5920eede1c2e0b7bfbfe1b3a8f8fb5c","modified":1481550260000},{"_id":"themes/again/source/css/_partial/article.scss","hash":"d61138a0f5e59204a4f37d34e4bdf48157e78bbe","modified":1481550260000},{"_id":"themes/again/source/css/_partial/header.scss","hash":"e0d092a98d2c9822a31a4b93c1e31fca5d68af21","modified":1481550260000},{"_id":"themes/again/source/css/_partial/index.scss","hash":"7498f3c447a5510891fb880d685a39f4791550f0","modified":1481550260000},{"_id":"themes/again/source/css/_partial/nav.scss","hash":"d66e6ae75faaa0bf77c481264e9109714007b1f8","modified":1481550260000},{"_id":"themes/again/source/css/_partial/page.scss","hash":"b576caf22a0d0b9b872ad54dbd0ab2c16a104b86","modified":1481550260000},{"_id":"themes/again/source/css/_widget/index.scss","hash":"5de4195cf47963fe68a15e16b7bb067970e0b83c","modified":1481550260000},{"_id":"themes/again/source/css/_widget/back-to-home.scss","hash":"d60425bff8e9cbed9f0f0a9827cbc567f994fb14","modified":1481550260000},{"_id":"themes/again/source/css/_partial/partials.scss","hash":"5fd002673fcd254a600b0d034c9eba03033715a4","modified":1481550260000},{"_id":"themes/again/source/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1481550260000},{"_id":"themes/again/source/css/_widget/highlight.scss","hash":"433e8a1c04b6e0fe5617cdadc2e12762c337d7f9","modified":1481550260000},{"_id":"themes/again/source/css/_widget/sharing.scss","hash":"38f54a9aa48654e4dad44535918550098aa913a6","modified":1481550260000},{"_id":"themes/again/.git/logs/refs/heads/master","hash":"9a11c55f166a803330aafcdfd1e56fac290fa746","modified":1481550260000},{"_id":"themes/again/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1481550260000},{"_id":"themes/again/source/favicon.ico","hash":"b3bb9c0748b169c2c254deeddd2c6987e2b768b5","modified":1481310317000},{"_id":"themes/again/.git/logs/refs/remotes/origin/HEAD","hash":"9a11c55f166a803330aafcdfd1e56fac290fa746","modified":1481550260000},{"_id":"themes/again/source/images/william-iven-5893.jpg","hash":"e5da8a45833d6403589e3d2706f7de76125aba29","modified":1502110231000},{"_id":"themes/again/.git/objects/ea/be89b86594839e7f9c5f79f86b2aaf78888910","hash":"3c61754978f547bc0e32e869de9cfa19479e8d24","modified":1502110306000},{"_id":"source/images/finpics-03.png","hash":"19fcd71a4c492b770def63fb2583e269c3202141","modified":1482434854000},{"_id":"themes/again/.git/objects/pack/pack-8b7cefb21652ced896f5912afd8ec9527a5c61ff.pack","hash":"95137375270844a4f53f39c00009177449750cb3","modified":1481550260000},{"_id":"themes/again/source/images/domenico-loia-272251.jpg","hash":"1f3630253dbe12bc30e975993067e98dcadb85fc","modified":1502109854000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Static Website CloudFormation Template","date":"2017-08-07T13:02:12.000Z","foreword":"Create a static website on AWS with the click of a button.","_content":"The template: {% raw %}<a href=\"https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\">static.website.cloudformation.json</a>{% endraw %}\n### Click here to launch your static website on AWS\n{% raw %}<a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=staticwebsite&templateURL=https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\"><img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\"/></a>{% endraw %}\n\n### What is a static website and why are they cool?\nA static website is simply html, css, js,... files hosted by AWS S3.  They are cool because there are no servers for you to maintain and pay for.  You only pay for the storage of your files and the amount of traffic your site gets.  Security is greatly improved because your site has no servers or databases to hack into.\n\n### What AWS resources does this template use?\n* S3 (File storage & static website)\n* CloudFront (HTTPS & caching)\n* Certificate Manager (SSL Cert)\n* Route53 (DNS)\n* CodeBuild (Continuous deployment)\n* CodePipeline (Continuous deployment)\n* CodeCommit (GIT repo)\n* CloudFormation (Infrastructure as Code)\n* IAM (AWS permissions & users)\n\nThis seems like a lot just to host a static website!  Yep, it is, that's why I created this handy CloudFormation template so the next time I want to stand up a _simple_ static website I just have to click the button above.\n\n### How do I get started?\n#### Step 1 - Create your AWS account\nThe first step is to create an {% raw %}<a href=\"https://aws.amazon.com\">AWS account</a>{% endraw %}.\n\n#### Step 2 - Create your IAM user\nOnce you're logged into your account you need to create an {% raw %}<a href=\"https://console.aws.amazon.com/iam/home\">IAM user</a>{% endraw %} with **Programmatic access**, and with **AWSCodeCommitFullAccess** & **AdministratorAccess** permissions.  Also, your user will need CodeCommit (GIT) credentials.  Don't forget to download all of your credentials because you'll need then later.  See the screen shots below:\n{% raw %}<img src=\"/images/aws-permissions.png\"/>{% endraw %}\n{% raw %}<img src=\"/images/aws-git-credentials.png\"/>{% endraw %}\n\n#### Step 3 - Purchase your domain name\nHead on over to {% raw %}<a href=\"https://console.aws.amazon.com/route53/home\">Route 53</a>{% endraw %} and register your domain name.  If you already have a domain name, don't worry, you can point it at Route53 after you build the stack. \n\n#### Step 4 - Build the stack\nClick on the buttom at the top to build the stack.  Use your domain name and app name as the input parameters.\n\nYou can also copy the cloudformation template and install the stack using the {% raw %}<a href=\"http://docs.aws.amazon.com/cli/latest/userguide/installing.html\">AWS command-line tools</a>{% endraw %}.  Harder but recommended.  You should really version control your IaC template as well as your code.  Here are the commands to create, update, and delete the stack.\n\n**Create Stack**\n```\naws cloudformation create-stack \\\n--stack-name <example-com> \\\n--template-body file:///<abs_path>/static.website.cloudformation.json \\\n--parameters ParameterKey=ApexDomainName,ParameterValue=<example.com> ParameterKey=AppName,ParameterValue=<example> \\\n--tags=Key=app,Value=<example.com> \\\n--capabilities CAPABILITY_IAM \\\n--profile <profile>\n```\n\n**Delete Stack**\n```\naws cloudformation delete-stack \\\n--stack-name <example-com> \\\n--profile <profile>\n```\n\n**Update Stack**\n```\naws cloudformation update-stack \\\n--stack-name <example-com> \\\n--template-body file:///<abs_path>/static.website.cloudformation.json \\\n--parameters ParameterKey=ApexDomainName,ParameterValue=<example.com> ParameterKey=AppName,ParameterValue=<example> \\\n--tags=Key=app,Value=<example.com> \\\n--capabilities CAPABILITY_IAM \\\n--profile <profile>\n```\n\n#### Step 5 - Validate domain ownership\nWhen AWS Certificate Manager creates your SSL certificate it sends and email to the domain name administrator (You).  You have to get that email and click the confirmation link.  Once this step has been completed the stack can continue being built.  More information can be found here:  http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html\n\n#### Step 6 - Wait for your stack to be built\nCheck the progress of your stack here:  https://console.aws.amazon.com/cloudformation/home\n\nOnce your stack has been built copy the output param which will be your CodeCommit repo URL.  \n\n### What do I do after my stack has been created?\nUse your CodeCommit repo and your CodeCommit credentials to start checking in your static site.\n\nCodePipeline and CodeBuild are setup to continuously deploy your site as you push changes to your repo.  \n\nBranches and CodePipeline actions:\n**master** -> Pushes changes to APEX <example.com> (yes ssl)\n**develop** -> Pushes changes to dev subdomain (no ssl)\n","source":"_posts/static-website-cloudformation-template.md","raw":"---\ntitle: Static Website CloudFormation Template\ndate: 2017-08-07 09:02:12\nforeword: Create a static website on AWS with the click of a button.\ntags:\n---\nThe template: {% raw %}<a href=\"https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\">static.website.cloudformation.json</a>{% endraw %}\n### Click here to launch your static website on AWS\n{% raw %}<a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=staticwebsite&templateURL=https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\"><img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\"/></a>{% endraw %}\n\n### What is a static website and why are they cool?\nA static website is simply html, css, js,... files hosted by AWS S3.  They are cool because there are no servers for you to maintain and pay for.  You only pay for the storage of your files and the amount of traffic your site gets.  Security is greatly improved because your site has no servers or databases to hack into.\n\n### What AWS resources does this template use?\n* S3 (File storage & static website)\n* CloudFront (HTTPS & caching)\n* Certificate Manager (SSL Cert)\n* Route53 (DNS)\n* CodeBuild (Continuous deployment)\n* CodePipeline (Continuous deployment)\n* CodeCommit (GIT repo)\n* CloudFormation (Infrastructure as Code)\n* IAM (AWS permissions & users)\n\nThis seems like a lot just to host a static website!  Yep, it is, that's why I created this handy CloudFormation template so the next time I want to stand up a _simple_ static website I just have to click the button above.\n\n### How do I get started?\n#### Step 1 - Create your AWS account\nThe first step is to create an {% raw %}<a href=\"https://aws.amazon.com\">AWS account</a>{% endraw %}.\n\n#### Step 2 - Create your IAM user\nOnce you're logged into your account you need to create an {% raw %}<a href=\"https://console.aws.amazon.com/iam/home\">IAM user</a>{% endraw %} with **Programmatic access**, and with **AWSCodeCommitFullAccess** & **AdministratorAccess** permissions.  Also, your user will need CodeCommit (GIT) credentials.  Don't forget to download all of your credentials because you'll need then later.  See the screen shots below:\n{% raw %}<img src=\"/images/aws-permissions.png\"/>{% endraw %}\n{% raw %}<img src=\"/images/aws-git-credentials.png\"/>{% endraw %}\n\n#### Step 3 - Purchase your domain name\nHead on over to {% raw %}<a href=\"https://console.aws.amazon.com/route53/home\">Route 53</a>{% endraw %} and register your domain name.  If you already have a domain name, don't worry, you can point it at Route53 after you build the stack. \n\n#### Step 4 - Build the stack\nClick on the buttom at the top to build the stack.  Use your domain name and app name as the input parameters.\n\nYou can also copy the cloudformation template and install the stack using the {% raw %}<a href=\"http://docs.aws.amazon.com/cli/latest/userguide/installing.html\">AWS command-line tools</a>{% endraw %}.  Harder but recommended.  You should really version control your IaC template as well as your code.  Here are the commands to create, update, and delete the stack.\n\n**Create Stack**\n```\naws cloudformation create-stack \\\n--stack-name <example-com> \\\n--template-body file:///<abs_path>/static.website.cloudformation.json \\\n--parameters ParameterKey=ApexDomainName,ParameterValue=<example.com> ParameterKey=AppName,ParameterValue=<example> \\\n--tags=Key=app,Value=<example.com> \\\n--capabilities CAPABILITY_IAM \\\n--profile <profile>\n```\n\n**Delete Stack**\n```\naws cloudformation delete-stack \\\n--stack-name <example-com> \\\n--profile <profile>\n```\n\n**Update Stack**\n```\naws cloudformation update-stack \\\n--stack-name <example-com> \\\n--template-body file:///<abs_path>/static.website.cloudformation.json \\\n--parameters ParameterKey=ApexDomainName,ParameterValue=<example.com> ParameterKey=AppName,ParameterValue=<example> \\\n--tags=Key=app,Value=<example.com> \\\n--capabilities CAPABILITY_IAM \\\n--profile <profile>\n```\n\n#### Step 5 - Validate domain ownership\nWhen AWS Certificate Manager creates your SSL certificate it sends and email to the domain name administrator (You).  You have to get that email and click the confirmation link.  Once this step has been completed the stack can continue being built.  More information can be found here:  http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html\n\n#### Step 6 - Wait for your stack to be built\nCheck the progress of your stack here:  https://console.aws.amazon.com/cloudformation/home\n\nOnce your stack has been built copy the output param which will be your CodeCommit repo URL.  \n\n### What do I do after my stack has been created?\nUse your CodeCommit repo and your CodeCommit credentials to start checking in your static site.\n\nCodePipeline and CodeBuild are setup to continuously deploy your site as you push changes to your repo.  \n\nBranches and CodePipeline actions:\n**master** -> Pushes changes to APEX <example.com> (yes ssl)\n**develop** -> Pushes changes to dev subdomain (no ssl)\n","slug":"static-website-cloudformation-template","published":1,"updated":"2017-08-07T20:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63lyzjr00009hfttlhiv3qf","content":"<p>The template: <a href=\"https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\" target=\"_blank\" rel=\"external\">static.website.cloudformation.json</a></p>\n<h3 id=\"Click-here-to-launch-your-static-website-on-AWS\"><a href=\"#Click-here-to-launch-your-static-website-on-AWS\" class=\"headerlink\" title=\"Click here to launch your static website on AWS\"></a>Click here to launch your static website on AWS</h3><a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=staticwebsite&templateURL=https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\" target=\"_blank\" rel=\"external\"><img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\"></a>\n<h3 id=\"What-is-a-static-website-and-why-are-they-cool\"><a href=\"#What-is-a-static-website-and-why-are-they-cool\" class=\"headerlink\" title=\"What is a static website and why are they cool?\"></a>What is a static website and why are they cool?</h3><p>A static website is simply html, css, js,… files hosted by AWS S3.  They are cool because there are no servers for you to maintain and pay for.  You only pay for the storage of your files and the amount of traffic your site gets.  Security is greatly improved because your site has no servers or databases to hack into.</p>\n<h3 id=\"What-AWS-resources-does-this-template-use\"><a href=\"#What-AWS-resources-does-this-template-use\" class=\"headerlink\" title=\"What AWS resources does this template use?\"></a>What AWS resources does this template use?</h3><ul>\n<li>S3 (File storage &amp; static website)</li>\n<li>CloudFront (HTTPS &amp; caching)</li>\n<li>Certificate Manager (SSL Cert)</li>\n<li>Route53 (DNS)</li>\n<li>CodeBuild (Continuous deployment)</li>\n<li>CodePipeline (Continuous deployment)</li>\n<li>CodeCommit (GIT repo)</li>\n<li>CloudFormation (Infrastructure as Code)</li>\n<li>IAM (AWS permissions &amp; users)</li>\n</ul>\n<p>This seems like a lot just to host a static website!  Yep, it is, that’s why I created this handy CloudFormation template so the next time I want to stand up a <em>simple</em> static website I just have to click the button above.</p>\n<h3 id=\"How-do-I-get-started\"><a href=\"#How-do-I-get-started\" class=\"headerlink\" title=\"How do I get started?\"></a>How do I get started?</h3><h4 id=\"Step-1-Create-your-AWS-account\"><a href=\"#Step-1-Create-your-AWS-account\" class=\"headerlink\" title=\"Step 1 - Create your AWS account\"></a>Step 1 - Create your AWS account</h4><p>The first step is to create an <a href=\"https://aws.amazon.com\" target=\"_blank\" rel=\"external\">AWS account</a>.</p>\n<h4 id=\"Step-2-Create-your-IAM-user\"><a href=\"#Step-2-Create-your-IAM-user\" class=\"headerlink\" title=\"Step 2 - Create your IAM user\"></a>Step 2 - Create your IAM user</h4><p>Once you’re logged into your account you need to create an <a href=\"https://console.aws.amazon.com/iam/home\" target=\"_blank\" rel=\"external\">IAM user</a> with <strong>Programmatic access</strong>, and with <strong>AWSCodeCommitFullAccess</strong> &amp; <strong>AdministratorAccess</strong> permissions.  Also, your user will need CodeCommit (GIT) credentials.  Don’t forget to download all of your credentials because you’ll need then later.  See the screen shots below:<br><img src=\"/images/aws-permissions.png\"><br><img src=\"/images/aws-git-credentials.png\"></p>\n<h4 id=\"Step-3-Purchase-your-domain-name\"><a href=\"#Step-3-Purchase-your-domain-name\" class=\"headerlink\" title=\"Step 3 - Purchase your domain name\"></a>Step 3 - Purchase your domain name</h4><p>Head on over to <a href=\"https://console.aws.amazon.com/route53/home\" target=\"_blank\" rel=\"external\">Route 53</a> and register your domain name.  If you already have a domain name, don’t worry, you can point it at Route53 after you build the stack. </p>\n<h4 id=\"Step-4-Build-the-stack\"><a href=\"#Step-4-Build-the-stack\" class=\"headerlink\" title=\"Step 4 - Build the stack\"></a>Step 4 - Build the stack</h4><p>Click on the buttom at the top to build the stack.  Use your domain name and app name as the input parameters.</p>\n<p>You can also copy the cloudformation template and install the stack using the <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/installing.html\" target=\"_blank\" rel=\"external\">AWS command-line tools</a>.  Harder but recommended.  You should really version control your IaC template as well as your code.  Here are the commands to create, update, and delete the stack.</p>\n<p><strong>Create Stack</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws cloudformation create-stack \\</div><div class=\"line\">--stack-name &lt;example-com&gt; \\</div><div class=\"line\">--template-body file:///&lt;abs_path&gt;/static.website.cloudformation.json \\</div><div class=\"line\">--parameters ParameterKey=ApexDomainName,ParameterValue=&lt;example.com&gt; ParameterKey=AppName,ParameterValue=&lt;example&gt; \\</div><div class=\"line\">--tags=Key=app,Value=&lt;example.com&gt; \\</div><div class=\"line\">--capabilities CAPABILITY_IAM \\</div><div class=\"line\">--profile &lt;profile&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Delete Stack</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws cloudformation delete-stack \\</div><div class=\"line\">--stack-name &lt;example-com&gt; \\</div><div class=\"line\">--profile &lt;profile&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Update Stack</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws cloudformation update-stack \\</div><div class=\"line\">--stack-name &lt;example-com&gt; \\</div><div class=\"line\">--template-body file:///&lt;abs_path&gt;/static.website.cloudformation.json \\</div><div class=\"line\">--parameters ParameterKey=ApexDomainName,ParameterValue=&lt;example.com&gt; ParameterKey=AppName,ParameterValue=&lt;example&gt; \\</div><div class=\"line\">--tags=Key=app,Value=&lt;example.com&gt; \\</div><div class=\"line\">--capabilities CAPABILITY_IAM \\</div><div class=\"line\">--profile &lt;profile&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-Validate-domain-ownership\"><a href=\"#Step-5-Validate-domain-ownership\" class=\"headerlink\" title=\"Step 5 - Validate domain ownership\"></a>Step 5 - Validate domain ownership</h4><p>When AWS Certificate Manager creates your SSL certificate it sends and email to the domain name administrator (You).  You have to get that email and click the confirmation link.  Once this step has been completed the stack can continue being built.  More information can be found here:  <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html\" target=\"_blank\" rel=\"external\">http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html</a></p>\n<h4 id=\"Step-6-Wait-for-your-stack-to-be-built\"><a href=\"#Step-6-Wait-for-your-stack-to-be-built\" class=\"headerlink\" title=\"Step 6 - Wait for your stack to be built\"></a>Step 6 - Wait for your stack to be built</h4><p>Check the progress of your stack here:  <a href=\"https://console.aws.amazon.com/cloudformation/home\" target=\"_blank\" rel=\"external\">https://console.aws.amazon.com/cloudformation/home</a></p>\n<p>Once your stack has been built copy the output param which will be your CodeCommit repo URL.  </p>\n<h3 id=\"What-do-I-do-after-my-stack-has-been-created\"><a href=\"#What-do-I-do-after-my-stack-has-been-created\" class=\"headerlink\" title=\"What do I do after my stack has been created?\"></a>What do I do after my stack has been created?</h3><p>Use your CodeCommit repo and your CodeCommit credentials to start checking in your static site.</p>\n<p>CodePipeline and CodeBuild are setup to continuously deploy your site as you push changes to your repo.  </p>\n<p>Branches and CodePipeline actions:<br><strong>master</strong> -&gt; Pushes changes to APEX <example.com> (yes ssl)<br><strong>develop</strong> -&gt; Pushes changes to dev subdomain (no ssl)</example.com></p>\n","site":{"data":{}},"excerpt":"","more":"<p>The template: <a href=\"https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\" target=\"_blank\" rel=\"external\">static.website.cloudformation.json</a></p>\n<h3 id=\"Click-here-to-launch-your-static-website-on-AWS\"><a href=\"#Click-here-to-launch-your-static-website-on-AWS\" class=\"headerlink\" title=\"Click here to launch your static website on AWS\"></a>Click here to launch your static website on AWS</h3><a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=staticwebsite&templateURL=https://s3.amazonaws.com/thestackshack/static.website.cloudformation.json\" target=\"_blank\" rel=\"external\"><img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\"></a>\n<h3 id=\"What-is-a-static-website-and-why-are-they-cool\"><a href=\"#What-is-a-static-website-and-why-are-they-cool\" class=\"headerlink\" title=\"What is a static website and why are they cool?\"></a>What is a static website and why are they cool?</h3><p>A static website is simply html, css, js,… files hosted by AWS S3.  They are cool because there are no servers for you to maintain and pay for.  You only pay for the storage of your files and the amount of traffic your site gets.  Security is greatly improved because your site has no servers or databases to hack into.</p>\n<h3 id=\"What-AWS-resources-does-this-template-use\"><a href=\"#What-AWS-resources-does-this-template-use\" class=\"headerlink\" title=\"What AWS resources does this template use?\"></a>What AWS resources does this template use?</h3><ul>\n<li>S3 (File storage &amp; static website)</li>\n<li>CloudFront (HTTPS &amp; caching)</li>\n<li>Certificate Manager (SSL Cert)</li>\n<li>Route53 (DNS)</li>\n<li>CodeBuild (Continuous deployment)</li>\n<li>CodePipeline (Continuous deployment)</li>\n<li>CodeCommit (GIT repo)</li>\n<li>CloudFormation (Infrastructure as Code)</li>\n<li>IAM (AWS permissions &amp; users)</li>\n</ul>\n<p>This seems like a lot just to host a static website!  Yep, it is, that’s why I created this handy CloudFormation template so the next time I want to stand up a <em>simple</em> static website I just have to click the button above.</p>\n<h3 id=\"How-do-I-get-started\"><a href=\"#How-do-I-get-started\" class=\"headerlink\" title=\"How do I get started?\"></a>How do I get started?</h3><h4 id=\"Step-1-Create-your-AWS-account\"><a href=\"#Step-1-Create-your-AWS-account\" class=\"headerlink\" title=\"Step 1 - Create your AWS account\"></a>Step 1 - Create your AWS account</h4><p>The first step is to create an <a href=\"https://aws.amazon.com\" target=\"_blank\" rel=\"external\">AWS account</a>.</p>\n<h4 id=\"Step-2-Create-your-IAM-user\"><a href=\"#Step-2-Create-your-IAM-user\" class=\"headerlink\" title=\"Step 2 - Create your IAM user\"></a>Step 2 - Create your IAM user</h4><p>Once you’re logged into your account you need to create an <a href=\"https://console.aws.amazon.com/iam/home\" target=\"_blank\" rel=\"external\">IAM user</a> with <strong>Programmatic access</strong>, and with <strong>AWSCodeCommitFullAccess</strong> &amp; <strong>AdministratorAccess</strong> permissions.  Also, your user will need CodeCommit (GIT) credentials.  Don’t forget to download all of your credentials because you’ll need then later.  See the screen shots below:<br><img src=\"/images/aws-permissions.png\"><br><img src=\"/images/aws-git-credentials.png\"></p>\n<h4 id=\"Step-3-Purchase-your-domain-name\"><a href=\"#Step-3-Purchase-your-domain-name\" class=\"headerlink\" title=\"Step 3 - Purchase your domain name\"></a>Step 3 - Purchase your domain name</h4><p>Head on over to <a href=\"https://console.aws.amazon.com/route53/home\" target=\"_blank\" rel=\"external\">Route 53</a> and register your domain name.  If you already have a domain name, don’t worry, you can point it at Route53 after you build the stack. </p>\n<h4 id=\"Step-4-Build-the-stack\"><a href=\"#Step-4-Build-the-stack\" class=\"headerlink\" title=\"Step 4 - Build the stack\"></a>Step 4 - Build the stack</h4><p>Click on the buttom at the top to build the stack.  Use your domain name and app name as the input parameters.</p>\n<p>You can also copy the cloudformation template and install the stack using the <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/installing.html\" target=\"_blank\" rel=\"external\">AWS command-line tools</a>.  Harder but recommended.  You should really version control your IaC template as well as your code.  Here are the commands to create, update, and delete the stack.</p>\n<p><strong>Create Stack</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws cloudformation create-stack \\</div><div class=\"line\">--stack-name &lt;example-com&gt; \\</div><div class=\"line\">--template-body file:///&lt;abs_path&gt;/static.website.cloudformation.json \\</div><div class=\"line\">--parameters ParameterKey=ApexDomainName,ParameterValue=&lt;example.com&gt; ParameterKey=AppName,ParameterValue=&lt;example&gt; \\</div><div class=\"line\">--tags=Key=app,Value=&lt;example.com&gt; \\</div><div class=\"line\">--capabilities CAPABILITY_IAM \\</div><div class=\"line\">--profile &lt;profile&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Delete Stack</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws cloudformation delete-stack \\</div><div class=\"line\">--stack-name &lt;example-com&gt; \\</div><div class=\"line\">--profile &lt;profile&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>Update Stack</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws cloudformation update-stack \\</div><div class=\"line\">--stack-name &lt;example-com&gt; \\</div><div class=\"line\">--template-body file:///&lt;abs_path&gt;/static.website.cloudformation.json \\</div><div class=\"line\">--parameters ParameterKey=ApexDomainName,ParameterValue=&lt;example.com&gt; ParameterKey=AppName,ParameterValue=&lt;example&gt; \\</div><div class=\"line\">--tags=Key=app,Value=&lt;example.com&gt; \\</div><div class=\"line\">--capabilities CAPABILITY_IAM \\</div><div class=\"line\">--profile &lt;profile&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-Validate-domain-ownership\"><a href=\"#Step-5-Validate-domain-ownership\" class=\"headerlink\" title=\"Step 5 - Validate domain ownership\"></a>Step 5 - Validate domain ownership</h4><p>When AWS Certificate Manager creates your SSL certificate it sends and email to the domain name administrator (You).  You have to get that email and click the confirmation link.  Once this step has been completed the stack can continue being built.  More information can be found here:  <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html\" target=\"_blank\" rel=\"external\">http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html</a></p>\n<h4 id=\"Step-6-Wait-for-your-stack-to-be-built\"><a href=\"#Step-6-Wait-for-your-stack-to-be-built\" class=\"headerlink\" title=\"Step 6 - Wait for your stack to be built\"></a>Step 6 - Wait for your stack to be built</h4><p>Check the progress of your stack here:  <a href=\"https://console.aws.amazon.com/cloudformation/home\" target=\"_blank\" rel=\"external\">https://console.aws.amazon.com/cloudformation/home</a></p>\n<p>Once your stack has been built copy the output param which will be your CodeCommit repo URL.  </p>\n<h3 id=\"What-do-I-do-after-my-stack-has-been-created\"><a href=\"#What-do-I-do-after-my-stack-has-been-created\" class=\"headerlink\" title=\"What do I do after my stack has been created?\"></a>What do I do after my stack has been created?</h3><p>Use your CodeCommit repo and your CodeCommit credentials to start checking in your static site.</p>\n<p>CodePipeline and CodeBuild are setup to continuously deploy your site as you push changes to your repo.  </p>\n<p>Branches and CodePipeline actions:<br><strong>master</strong> -&gt; Pushes changes to APEX <example.com> (yes ssl)<br><strong>develop</strong> -&gt; Pushes changes to dev subdomain (no ssl)</example.com></p>\n"},{"title":"Rekognize your serverless photo album","date":"2016-12-12T18:57:50.000Z","foreword":"Add facial recognition to your online photo album using AWS Rekognition, Lambda, Cognito, DynamoDB, S3, and Route53.","_content":"In this blog post I explain how I used AWS to build a serverless photo album with facial recognition.  This is not a step-by-step tutorial but rather an overview of the architecture, setup, and code.\n\nI started my online photo album, finpics.com, back in 1999.  I originally built finpics.com using php and mysql.\nI also had a custom Java Applet to upload the images.  Pretty cool, right.\n\nCode: [https://github.com/rgfindl/finpics](https://github.com/rgfindl/finpics)\nWebsite: [http://finpics.com](http://finpics.com)\n\n{% raw %}\n<img src=\"/images/finpics-03.png\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"/>\n{% endraw %}\n\n### Serverless\n\nServerless architectures refer to applications that significantly depend on third-party services (knows as Backend as a Service or \"BaaS\") or on custom code that's run in ephemeral containers (Function as a Service or \"FaaS\"), the best known vendor host of which currently is AWS Lambda. [http://martinfowler.com/articles/serverless.html](http://martinfowler.com/articles/serverless.html)\n\n### finpics.com\n\nfinpics.com gets almost no traffic.  Good thing too because there are a lot of embarrassing picture of myself, family, and friends. A serverless architectures is more cost effective because I'm not paying for a server to run that gets very little traffic. There is also very little maintenance with serverless apps.\n\nOnce AWS Rekognition was released I knew that I wanted to use it to improve the searchability of finpics.com.  It is great to click on someones face and see more pictures of them.\n\n### AWS resources\n\n|AWS Resource|Usage|\n|--------|-----|\n|Route53|DNS for finpics.com, points to static S3 bucket.|\n|S3|Hosts static website and images.|\n|Cognito|Authorization. Lets the web client assume an IAM Role to make calls to AWS resources.|\n|DynamoDB|Store image metadata.|\n|Lambda|Serverless compute.|\n|Rekognition|Facial recognition.|\n\n## Architecture\n### Web Requests\n{% raw %}<img src=\"/images/finpics-01.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"/>{% endraw %}\n**Static Web Site**\nFetch the html, js, css, and image assets directly from S3.\n\n**Get Unauth Creds**\nMake a call to Cognito to get AWS credentials to use for all the calls to AWS.  The user assumes the unauthenticated IAM role that you define in Cognito.\n\n**Fetch Pictures**\nThe pictures are structured into picture sets.  A call is made to DynamoDB to get all the picture sets, and the featured pic for each set.  Then another call is made to DynamoDB to get the pictures for each set.\n\n**Search Faces**\nSearch Rekognition given a face id.  When you click on a persons face the results are pictures with that face sorted by highest probability.\n\n### Upload Images\nImages are uploaded directly to S3.  There is an S3 event that triggers a Lambda function to perform the following tasks on each new image:\n* Create a thumbnail\n* Index the faces with Rekognition\n* Store metadata in DynamoDB\n\nI have a [script](https://github.com/rgfindl/finpics/blob/master/util/upload-pics.js) that uploads a new picture set.\n{% raw %}<img src=\"/images/finpics-02.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"/>{% endraw %}\n\n## DynamoDB Tables\n### pics table\n* primaykey (Primary Key)\n* sortKey (Sort Key)\n* data (Rekognition IndexFaces response)\n\nThe pics table stores all the picture sets, with featured image, which is used by the [index](http://finpics.com) page.\n\n**Picsets**\n* primaykey: '/' (Primary Key)\n* sortkey: '014_newportboston' (Sort Key)\n* pic: 'Newport_pic_3.jpg'\n\nThe pics table also stores all the pictures associated with a picture set, which is used by each [picture set](http://finpics.com/#!/picset?path=280_pic_set_282) page.\n**Pics**\n* primaykey: '014_newportboston' (Primary Key)\n* sortkey: 'Newport_pic_3.jpg' (Sort Key)\n* ... Rekognition IndexFaces response\n\n### pics_by_image_id table\n* image_id (Primary Key)\n* data (Rekognition IndexFaces response)\n* image_path\n\nThe pics_by_image_id table stores the same facial recognition data as the pics table but is index by the AWS Rekognition image_id.  When we search Rekognition for facial matches we use the image_id's in the response to fetch the picture information via this table.\n\n## Setup & Code Samples\n### AWS S3\nI'm using 3 buckets for finpics.com.\n* **finpics.com** which serves the static web content.\n* **finpics-pics** which serves the original (large) images.\n* **finpics-thumbs** which serves the thumbnails.\n\nI used different buckets for 2 reasons:\n1. AWS Rekognition fails when your bucket name has a period in it.  Awesome!\n2. For every new picture added to **finpics-pics** a Lambda function is triggered to create the thumbnail.  I didn't want to create a circular loop.\n\nFor each bucket I have **Web Hosting** enabled.\n\nI want all assets in these 3 buckets to be publicly available.  Under **Permissions** I have the following **bucket policy** for each.  Make sure to change the Resource name to match your bucket name.\n```\n{\n\t\"Version\": \"2008-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"PublicReadForGetBucketObjects\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"AWS\": \"*\"\n\t\t\t},\n\t\t\t\"Action\": \"s3:GetObject\",\n\t\t\t\"Resource\": \"arn:aws:s3:::finpics-pics/*\"\n\t\t}\n\t]\n}\n```\n\nNow all my web assets are publicly available and served via S3.  Cheap, serverless, and performant.\n\n### AWS Cognito\nCognito allows the client-side JavaScript code permission to access AWS resources like DynamoDD & Lambda functions.\n\nI created a Cognito **Federated Identity** called `finpics`.  When creating this identity I **Enabled access to unauthenticated identities**.  I also created new Unauthenticated and Authenticated AWS IAM Roles.  I'll explain the permissions needed within Unauthenticated role later.  I'm currently not using the Authenticated role.\n\n{% raw %}<img src=\"/images/finpics-04.png\" style=\"border: solid 1px #eee; padding: 5px;\"/>{% endraw %}\n\nIn the client-side JavaScript code I assume the Unathenticated role like this.  All subsequent calls to AWS will use this IAM role.\n```\n// Initialize the Amazon Cognito credentials provider\nAWS.config.region = 'us-east-1'; // Region\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'your-id'\n});\n```\n\n### IAM Roles\n#### Cognito Unathenticated Role\nCognito will automatically create the Unathenticated role and setup the **Trust Relationship** with the Cognito federated identity.\n\nHere are the permissions:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"mobileanalytics:PutEvents\",\n                \"cognito-sync:*\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481636027000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:GetItem\",\n                \"dynamodb:GetRecords\",\n                \"dynamodb:Query\"\n            ],\n            \"Resource\": [\n                \"arn:aws:dynamodb:us-east-1:132093761664:table/pics\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481853728000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"lambda:InvokeFunction\"\n            ],\n            \"Resource\": [\n                \"arn:aws:lambda:us-east-1:132093761664:function:finpics-dev-search\"\n            ]\n        }\n    ]\n}```\n\n1. The first is permission is sync the user with Cognito (Cognito stuff).\n2. The second permission is to get picture data and metadata from DynamoDB.\n3. The third permission is to invoke our Lambda function.\n\n#### Lambda Role\nThe Lambda role has permissions to interact with the S3 buckets, DynamoDB tables, and the Rekognition collection (which I will create next).  Lambda also has permission to CloudWatch logs.\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1481315917000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::finpics-pics/*\",\n                \"arn:aws:s3:::finpics-thumbs/*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481636027000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:GetItem\",\n                \"dynamodb:GetRecords\",\n                \"dynamodb:Query\",\n                \"dynamodb:BatchGetItem\",\n                \"dynamodb:PutItem\",\n                \"dynamodb:UpdateItem\"\n            ],\n            \"Resource\": [\n                \"arn:aws:dynamodb:us-east-1:132093761664:table/pics\",\n                \"arn:aws:dynamodb:us-east-1:132093761664:table/pics_by_image_id\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481823471000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"rekognition:CompareFaces\",\n                \"rekognition:ListFaces\",\n                \"rekognition:SearchFaces\",\n                \"rekognition:SearchFacesByImage\",\n                \"rekognition:IndexFaces\"\n            ],\n            \"Resource\": [\n                \"arn:aws:rekognition:us-east-1:132093761664:collection/finpics/person/*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1482175623000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:us-east-1:132093761664:log-group:/aws/lambda/*:*:*\"\n            ]\n        }\n    ]\n}\n```\n\n### Rekognition\nAmazon Rekognition is a service that makes it easy to add image analysis to your applications. With Rekognition, you can detect objects, scenes, and faces in images. You can also search and compare faces. Rekognition’s API enables you to quickly add sophisticated deep learning-based visual search and image classification to your applications.\n\nTo start indexing faces we first need to create a Rekognition collection.\n```\nvar AWS = require('aws-sdk');\nvar rekognition = new AWS.Rekognition({apiVersion: '2016-06-27'});\n\nvar params = {\n    CollectionId: 'finpics' /* required */\n};\nrekognition.createCollection(params, function(err, data) {\n    if (err) console.log(err, err.stack); // an error occurred\n    else     console.log(data);           // successful response\n});\n```\n\nWhen an image is added to S3 our Lambda function is triggered.  The Lambda function indexes the image which adds all the faces within that image to the Rekognition collection.\n\n```\nvar params = {\n    CollectionId: 'finpics', /* required */\n    Image: { /* required */\n        S3Object: {\n            Bucket: 'finpics-pics',\n            Name: key\n        }\n    }\n};\nrekognition.indexFaces(params, function(err, data) {\n    if (err)  winston.error(err);\n    callback(err, data);\n});\n```\n\nWhen a user clicks on a face we search the Rekognition collection to find matches ordered by match probability.\n```\nvar AWS = require('aws-sdk');\nvar rekognition = new AWS.Rekognition({apiVersion: '2016-06-27'});\n\nvar params = {\n    CollectionId: 'finpics', /* required */\n    FaceId: faceid\n};\nrekognition.searchFaces(params, function (err, data) {\n    if (err)  winston.error(err);\n    callback(err, data);\n});\n```\n\n### Lambda Functions\nThere are two Lambda functions:\n1. Search - search the Rekognition facial collection given a `faceid`.\n2. Process New Image - Triggered for each new image added to S3.\n * Creates a thumbnail\n * Indexes the image within the Rekognition collection\n * Adds image and metadata to DynamoDB\n\n[Lambda functions](https://github.com/rgfindl/finpics/blob/master/lambda/index.js)\n\n#### Search\n1. Search the Rekognition collection.\n2. Bulk fetch the images from DynamoDB.\n3. Normalize the DynamoDB results.\n```\nsearch: function(event, context, callback) {\n    //\n    // Search AWS Rekognition given the faceid.\n    //\n    var params = {\n      CollectionId: 'finpics', /* required */\n      FaceId: event.faceid\n    };\n    rekognition.searchFaces(params, function (err, data) {\n      if (err) {\n        var response = {\n          statusCode: 500,\n          err: err,\n          params: params\n        };\n        callback(null, response);\n      } else {\n        //\n        // For each face match.  Fetch the image information from DynamoDB.\n        //\n        var keys = [];\n        var imageids = [];\n        _.forEach(data.FaceMatches, function (FaceMatch) {\n          if (!_.includes(imageids, FaceMatch.Face.ImageId)) {\n            keys.push({\"image_id\": {\"S\": FaceMatch.Face.ImageId}});\n            imageids.push(FaceMatch.Face.ImageId);\n          }\n        });\n        var params = {\n          \"RequestItems\": {\n            \"pics_by_image_id\": {\n              \"Keys\": _.slice(keys, 0, 100)\n            }\n          }\n        };\n        dynamodb.batchGetItem(params, function (err, results) {\n          if (err) {\n            var response = {\n              statusCode: 500,\n              err: err,\n              params: params\n            };\n            callback(null, response);\n          } else {\n            //\n            // Normalize the images we get back from the DynamoDB bulk get request.\n            //\n            var output = [];\n            var imageids = [];\n            _.forEach(data.FaceMatches, function (FaceMatch) {\n              if (!_.includes(imageids, FaceMatch.Face.ImageId)) {\n                var raw_item = _.find(results.Responses.pics_by_image_id, {image_id: {S: FaceMatch.Face.ImageId}});\n                if (!_.isNil(raw_item)) {\n                  var item = {\n                    image_id: raw_item.image_id.S,\n                    image_path: raw_item.image_path.S\n                  };\n                  var faces = [];\n                  _.forEach(raw_item.data.M.FaceRecords.L, function (FaceRecord) {\n                    faces.push({\n                      Face: {\n                        Confidence: FaceRecord.M.Face.M.Confidence.N,\n                        ImageId: FaceRecord.M.Face.M.ImageId.S,\n                        BoundingBox: {\n                          Top: FaceRecord.M.Face.M.BoundingBox.M.Top.N,\n                          Height: FaceRecord.M.Face.M.BoundingBox.M.Height.N,\n                          Width: FaceRecord.M.Face.M.BoundingBox.M.Width.N,\n                          Left: FaceRecord.M.Face.M.BoundingBox.M.Left.N\n                        },\n                        FaceId: FaceRecord.M.Face.M.FaceId.S,\n                      }\n                    });\n                  });\n                  item.data = {\n                    FaceRecords: faces\n                  };\n                  output.push(item);\n                }\n                imageids.push(FaceMatch.Face.ImageId);\n              }\n            });\n            var response = {\n              statusCode: 200,\n              output: output\n            };\n            callback(null, response);\n          }\n        });\n      }\n    });\n}\n```\n\n#### Process New Image\n1. Download image from S3 (finpics-pics)\n2. Create thumbnail\n3. Upload thumbnail to S3 (finpics-thumbs)\n4. Add feature picture for album, if needed\n5. Index image using Rekognition\n6. Add image and metadata to DynamoDB\n\n```\n  s3: function(event, context, callback) {\n\n    winston.info(\"Reading options from event:\\n\", util.inspect(event, {depth: 5}));\n    var srcBucket = event.Records[0].s3.bucket.name;\n    // Object key may have spaces or unicode non-ASCII characters.\n    var srcKey    =\n        decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, \" \"));\n    var dstBucket = S3_THUMBS_BUCKET;\n    var dstKey    = srcKey;\n\n    // Sanity check: validate that source and destination are different buckets.\n    if (srcBucket == dstBucket) {\n      callback(\"Source and destination buckets are the same.\");\n      return;\n    }\n\n    // Infer the image type.\n    var typeMatch = srcKey.match(/\\.([^.]*)$/);\n    if (!typeMatch) {\n      callback(\"Could not determine the image type.\");\n      return;\n    }\n    var imageType = _.toLower(typeMatch[1]);\n    if (imageType != \"jpg\" && imageType != \"jpeg\" && imageType != \"png\") {\n      callback('Unsupported image type: ${imageType}');\n      return;\n    }\n\n    // Download the image from S3, transform, and upload to a different S3 bucket.\n    async.waterfall([\n          function download(next) {\n            // Download the image from S3 into a buffer.\n            s3.getObject({\n                  Bucket: srcBucket,\n                  Key: srcKey\n                },\n                next);\n          },\n          function transform(response, next) {\n            gm(response.Body).size(function(err, size) {\n              // Infer the scaling factor to avoid stretching the image unnaturally.\n              var scalingFactor = Math.min(\n                  MAX_WIDTH / size.width,\n                  MAX_HEIGHT / size.height\n              );\n              var width  = scalingFactor * size.width;\n              var height = scalingFactor * size.height;\n\n              // Transform the image buffer in memory.\n              this.resize(width, height).autoOrient()\n                  .toBuffer(imageType, function(err, buffer) {\n                    if (err) {\n                      next(err);\n                    } else {\n                      next(null, response.ContentType, buffer);\n                    }\n                  });\n            });\n          },\n          function upload(contentType, data, next) {\n            // Stream the transformed image to a different S3 bucket.\n            s3.putObject({\n                  Bucket: dstBucket,\n                  Key: dstKey,\n                  Body: data,\n                  ContentType: contentType,\n                  StorageClass: 'REDUCED_REDUNDANCY'\n                },\n                next);\n          },\n          function add_feature_pic(response, next) {\n            var image_parts = _.drop(_.split(srcKey, '/'));\n            var params = {\n              TableName: 'pics',\n              Key: {\n                primarykey: '/',\n                sortkey: _.head(image_parts)\n              },\n              UpdateExpression: \"set pic = :pic\",\n              ConditionExpression: \"attribute_not_exists(pic)\",\n              ExpressionAttributeValues:{\n                ':pic': _.last(image_parts)\n              }\n            };\n            winston.info(JSON.stringify(params));\n            docClient.update(params, function(err, results) {\n              if (err && _.isEqual(err.code, 'ConditionalCheckFailedException')) next(null, null);\n              else next(err, results);\n            });\n          },\n          function rekognize(response, next) {\n            var params = {\n              CollectionId: COLLECTION_ID, /* required */\n              Image: { /* required */\n                S3Object: {\n                  Bucket: srcBucket,\n                  Name: srcKey\n                }\n              }\n            };\n            winston.info('Index faces');\n            winston.info(JSON.stringify(params));\n            rekognition.indexFaces(params, next);\n          },\n          function add_pics(data, next) {\n            var image_parts = _.drop(_.split(srcKey, '/'));\n            var item = {\n              primarykey: _.head(image_parts),\n              sortkey: _.nth(image_parts, 1),\n              data: data\n            };\n            var params = {\n              TableName: 'pics',\n              Item: item\n            };\n            winston.info('Put DynamoDB');\n            winston.info(JSON.stringify(params));\n            docClient.put(params, function(err, respose) {\n              if (err)  winston.error(err);\n              next(err, data);\n            });\n          },\n          function add_pics_by_image_id(data, next) {\n            if (!_.isNil(data) && !_.isNil(data.FaceRecords) && !_.isEmpty(data.FaceRecords) &&\n                !_.isNil(data.FaceRecords[0].Face) && !_.isNil(data.FaceRecords[0].Face.ImageId)) {\n              var image_parts = _.drop(_.split(srcKey, '/'));\n              var item = {\n                image_id: data.FaceRecords[0].Face.ImageId,\n                data: data,\n                image_path: _.join(image_parts, '/')\n              };\n              var params = {\n                TableName: 'pics_by_image_id',\n                Item: item\n              };\n              winston.info('Put DynamoDB');\n              winston.info(JSON.stringify(params));\n              docClient.put(params, next);\n            } else next(null, null);\n          }\n        ], function (err) {\n          if (err) {\n            winston.error(\n                'Unable to resize ' + srcBucket + '/' + srcKey +\n                ' and upload to ' + dstBucket + '/' + dstKey +\n                ' due to an error: ' + err\n            );\n          } else {\n            winston.info(\n                'Successfully resized ' + srcBucket + '/' + srcKey +\n                ' and uploaded to ' + dstBucket + '/' + dstKey\n            );\n          }\n\n          callback(null, \"message\");\n        }\n    );\n  }\n```\n\nThanks for reading my blog post.  Please let me know if you have any questions.\n\nHere is the [source code](https://github.com/rgfindl/finpics).\nHere is the [demo (finpics.com)](http://finpics.com).\n\nThere are a bunch of untilities [here](https://github.com/rgfindl/finpics/blob/master/util).  I had a lot of images already that I had to process using [this script](https://github.com/rgfindl/finpics/blob/master/util/process-existing-images.js).","source":"_posts/rekognize-your-serverless-photo-album.md","raw":"---\ntitle: Rekognize your serverless photo album\ndate: 2016-12-12 13:57:50\nforeword: Add facial recognition to your online photo album using AWS Rekognition, Lambda, Cognito, DynamoDB, S3, and Route53.\ntags: aws, rekognition, photo, album, lambda, cognito, facebook, s3, route53, dynamodb, serverless\n---\nIn this blog post I explain how I used AWS to build a serverless photo album with facial recognition.  This is not a step-by-step tutorial but rather an overview of the architecture, setup, and code.\n\nI started my online photo album, finpics.com, back in 1999.  I originally built finpics.com using php and mysql.\nI also had a custom Java Applet to upload the images.  Pretty cool, right.\n\nCode: [https://github.com/rgfindl/finpics](https://github.com/rgfindl/finpics)\nWebsite: [http://finpics.com](http://finpics.com)\n\n{% raw %}\n<img src=\"/images/finpics-03.png\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"/>\n{% endraw %}\n\n### Serverless\n\nServerless architectures refer to applications that significantly depend on third-party services (knows as Backend as a Service or \"BaaS\") or on custom code that's run in ephemeral containers (Function as a Service or \"FaaS\"), the best known vendor host of which currently is AWS Lambda. [http://martinfowler.com/articles/serverless.html](http://martinfowler.com/articles/serverless.html)\n\n### finpics.com\n\nfinpics.com gets almost no traffic.  Good thing too because there are a lot of embarrassing picture of myself, family, and friends. A serverless architectures is more cost effective because I'm not paying for a server to run that gets very little traffic. There is also very little maintenance with serverless apps.\n\nOnce AWS Rekognition was released I knew that I wanted to use it to improve the searchability of finpics.com.  It is great to click on someones face and see more pictures of them.\n\n### AWS resources\n\n|AWS Resource|Usage|\n|--------|-----|\n|Route53|DNS for finpics.com, points to static S3 bucket.|\n|S3|Hosts static website and images.|\n|Cognito|Authorization. Lets the web client assume an IAM Role to make calls to AWS resources.|\n|DynamoDB|Store image metadata.|\n|Lambda|Serverless compute.|\n|Rekognition|Facial recognition.|\n\n## Architecture\n### Web Requests\n{% raw %}<img src=\"/images/finpics-01.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"/>{% endraw %}\n**Static Web Site**\nFetch the html, js, css, and image assets directly from S3.\n\n**Get Unauth Creds**\nMake a call to Cognito to get AWS credentials to use for all the calls to AWS.  The user assumes the unauthenticated IAM role that you define in Cognito.\n\n**Fetch Pictures**\nThe pictures are structured into picture sets.  A call is made to DynamoDB to get all the picture sets, and the featured pic for each set.  Then another call is made to DynamoDB to get the pictures for each set.\n\n**Search Faces**\nSearch Rekognition given a face id.  When you click on a persons face the results are pictures with that face sorted by highest probability.\n\n### Upload Images\nImages are uploaded directly to S3.  There is an S3 event that triggers a Lambda function to perform the following tasks on each new image:\n* Create a thumbnail\n* Index the faces with Rekognition\n* Store metadata in DynamoDB\n\nI have a [script](https://github.com/rgfindl/finpics/blob/master/util/upload-pics.js) that uploads a new picture set.\n{% raw %}<img src=\"/images/finpics-02.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"/>{% endraw %}\n\n## DynamoDB Tables\n### pics table\n* primaykey (Primary Key)\n* sortKey (Sort Key)\n* data (Rekognition IndexFaces response)\n\nThe pics table stores all the picture sets, with featured image, which is used by the [index](http://finpics.com) page.\n\n**Picsets**\n* primaykey: '/' (Primary Key)\n* sortkey: '014_newportboston' (Sort Key)\n* pic: 'Newport_pic_3.jpg'\n\nThe pics table also stores all the pictures associated with a picture set, which is used by each [picture set](http://finpics.com/#!/picset?path=280_pic_set_282) page.\n**Pics**\n* primaykey: '014_newportboston' (Primary Key)\n* sortkey: 'Newport_pic_3.jpg' (Sort Key)\n* ... Rekognition IndexFaces response\n\n### pics_by_image_id table\n* image_id (Primary Key)\n* data (Rekognition IndexFaces response)\n* image_path\n\nThe pics_by_image_id table stores the same facial recognition data as the pics table but is index by the AWS Rekognition image_id.  When we search Rekognition for facial matches we use the image_id's in the response to fetch the picture information via this table.\n\n## Setup & Code Samples\n### AWS S3\nI'm using 3 buckets for finpics.com.\n* **finpics.com** which serves the static web content.\n* **finpics-pics** which serves the original (large) images.\n* **finpics-thumbs** which serves the thumbnails.\n\nI used different buckets for 2 reasons:\n1. AWS Rekognition fails when your bucket name has a period in it.  Awesome!\n2. For every new picture added to **finpics-pics** a Lambda function is triggered to create the thumbnail.  I didn't want to create a circular loop.\n\nFor each bucket I have **Web Hosting** enabled.\n\nI want all assets in these 3 buckets to be publicly available.  Under **Permissions** I have the following **bucket policy** for each.  Make sure to change the Resource name to match your bucket name.\n```\n{\n\t\"Version\": \"2008-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"PublicReadForGetBucketObjects\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"AWS\": \"*\"\n\t\t\t},\n\t\t\t\"Action\": \"s3:GetObject\",\n\t\t\t\"Resource\": \"arn:aws:s3:::finpics-pics/*\"\n\t\t}\n\t]\n}\n```\n\nNow all my web assets are publicly available and served via S3.  Cheap, serverless, and performant.\n\n### AWS Cognito\nCognito allows the client-side JavaScript code permission to access AWS resources like DynamoDD & Lambda functions.\n\nI created a Cognito **Federated Identity** called `finpics`.  When creating this identity I **Enabled access to unauthenticated identities**.  I also created new Unauthenticated and Authenticated AWS IAM Roles.  I'll explain the permissions needed within Unauthenticated role later.  I'm currently not using the Authenticated role.\n\n{% raw %}<img src=\"/images/finpics-04.png\" style=\"border: solid 1px #eee; padding: 5px;\"/>{% endraw %}\n\nIn the client-side JavaScript code I assume the Unathenticated role like this.  All subsequent calls to AWS will use this IAM role.\n```\n// Initialize the Amazon Cognito credentials provider\nAWS.config.region = 'us-east-1'; // Region\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'your-id'\n});\n```\n\n### IAM Roles\n#### Cognito Unathenticated Role\nCognito will automatically create the Unathenticated role and setup the **Trust Relationship** with the Cognito federated identity.\n\nHere are the permissions:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"mobileanalytics:PutEvents\",\n                \"cognito-sync:*\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481636027000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:GetItem\",\n                \"dynamodb:GetRecords\",\n                \"dynamodb:Query\"\n            ],\n            \"Resource\": [\n                \"arn:aws:dynamodb:us-east-1:132093761664:table/pics\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481853728000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"lambda:InvokeFunction\"\n            ],\n            \"Resource\": [\n                \"arn:aws:lambda:us-east-1:132093761664:function:finpics-dev-search\"\n            ]\n        }\n    ]\n}```\n\n1. The first is permission is sync the user with Cognito (Cognito stuff).\n2. The second permission is to get picture data and metadata from DynamoDB.\n3. The third permission is to invoke our Lambda function.\n\n#### Lambda Role\nThe Lambda role has permissions to interact with the S3 buckets, DynamoDB tables, and the Rekognition collection (which I will create next).  Lambda also has permission to CloudWatch logs.\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1481315917000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::finpics-pics/*\",\n                \"arn:aws:s3:::finpics-thumbs/*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481636027000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:GetItem\",\n                \"dynamodb:GetRecords\",\n                \"dynamodb:Query\",\n                \"dynamodb:BatchGetItem\",\n                \"dynamodb:PutItem\",\n                \"dynamodb:UpdateItem\"\n            ],\n            \"Resource\": [\n                \"arn:aws:dynamodb:us-east-1:132093761664:table/pics\",\n                \"arn:aws:dynamodb:us-east-1:132093761664:table/pics_by_image_id\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1481823471000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"rekognition:CompareFaces\",\n                \"rekognition:ListFaces\",\n                \"rekognition:SearchFaces\",\n                \"rekognition:SearchFacesByImage\",\n                \"rekognition:IndexFaces\"\n            ],\n            \"Resource\": [\n                \"arn:aws:rekognition:us-east-1:132093761664:collection/finpics/person/*\"\n            ]\n        },\n        {\n            \"Sid\": \"Stmt1482175623000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:us-east-1:132093761664:log-group:/aws/lambda/*:*:*\"\n            ]\n        }\n    ]\n}\n```\n\n### Rekognition\nAmazon Rekognition is a service that makes it easy to add image analysis to your applications. With Rekognition, you can detect objects, scenes, and faces in images. You can also search and compare faces. Rekognition’s API enables you to quickly add sophisticated deep learning-based visual search and image classification to your applications.\n\nTo start indexing faces we first need to create a Rekognition collection.\n```\nvar AWS = require('aws-sdk');\nvar rekognition = new AWS.Rekognition({apiVersion: '2016-06-27'});\n\nvar params = {\n    CollectionId: 'finpics' /* required */\n};\nrekognition.createCollection(params, function(err, data) {\n    if (err) console.log(err, err.stack); // an error occurred\n    else     console.log(data);           // successful response\n});\n```\n\nWhen an image is added to S3 our Lambda function is triggered.  The Lambda function indexes the image which adds all the faces within that image to the Rekognition collection.\n\n```\nvar params = {\n    CollectionId: 'finpics', /* required */\n    Image: { /* required */\n        S3Object: {\n            Bucket: 'finpics-pics',\n            Name: key\n        }\n    }\n};\nrekognition.indexFaces(params, function(err, data) {\n    if (err)  winston.error(err);\n    callback(err, data);\n});\n```\n\nWhen a user clicks on a face we search the Rekognition collection to find matches ordered by match probability.\n```\nvar AWS = require('aws-sdk');\nvar rekognition = new AWS.Rekognition({apiVersion: '2016-06-27'});\n\nvar params = {\n    CollectionId: 'finpics', /* required */\n    FaceId: faceid\n};\nrekognition.searchFaces(params, function (err, data) {\n    if (err)  winston.error(err);\n    callback(err, data);\n});\n```\n\n### Lambda Functions\nThere are two Lambda functions:\n1. Search - search the Rekognition facial collection given a `faceid`.\n2. Process New Image - Triggered for each new image added to S3.\n * Creates a thumbnail\n * Indexes the image within the Rekognition collection\n * Adds image and metadata to DynamoDB\n\n[Lambda functions](https://github.com/rgfindl/finpics/blob/master/lambda/index.js)\n\n#### Search\n1. Search the Rekognition collection.\n2. Bulk fetch the images from DynamoDB.\n3. Normalize the DynamoDB results.\n```\nsearch: function(event, context, callback) {\n    //\n    // Search AWS Rekognition given the faceid.\n    //\n    var params = {\n      CollectionId: 'finpics', /* required */\n      FaceId: event.faceid\n    };\n    rekognition.searchFaces(params, function (err, data) {\n      if (err) {\n        var response = {\n          statusCode: 500,\n          err: err,\n          params: params\n        };\n        callback(null, response);\n      } else {\n        //\n        // For each face match.  Fetch the image information from DynamoDB.\n        //\n        var keys = [];\n        var imageids = [];\n        _.forEach(data.FaceMatches, function (FaceMatch) {\n          if (!_.includes(imageids, FaceMatch.Face.ImageId)) {\n            keys.push({\"image_id\": {\"S\": FaceMatch.Face.ImageId}});\n            imageids.push(FaceMatch.Face.ImageId);\n          }\n        });\n        var params = {\n          \"RequestItems\": {\n            \"pics_by_image_id\": {\n              \"Keys\": _.slice(keys, 0, 100)\n            }\n          }\n        };\n        dynamodb.batchGetItem(params, function (err, results) {\n          if (err) {\n            var response = {\n              statusCode: 500,\n              err: err,\n              params: params\n            };\n            callback(null, response);\n          } else {\n            //\n            // Normalize the images we get back from the DynamoDB bulk get request.\n            //\n            var output = [];\n            var imageids = [];\n            _.forEach(data.FaceMatches, function (FaceMatch) {\n              if (!_.includes(imageids, FaceMatch.Face.ImageId)) {\n                var raw_item = _.find(results.Responses.pics_by_image_id, {image_id: {S: FaceMatch.Face.ImageId}});\n                if (!_.isNil(raw_item)) {\n                  var item = {\n                    image_id: raw_item.image_id.S,\n                    image_path: raw_item.image_path.S\n                  };\n                  var faces = [];\n                  _.forEach(raw_item.data.M.FaceRecords.L, function (FaceRecord) {\n                    faces.push({\n                      Face: {\n                        Confidence: FaceRecord.M.Face.M.Confidence.N,\n                        ImageId: FaceRecord.M.Face.M.ImageId.S,\n                        BoundingBox: {\n                          Top: FaceRecord.M.Face.M.BoundingBox.M.Top.N,\n                          Height: FaceRecord.M.Face.M.BoundingBox.M.Height.N,\n                          Width: FaceRecord.M.Face.M.BoundingBox.M.Width.N,\n                          Left: FaceRecord.M.Face.M.BoundingBox.M.Left.N\n                        },\n                        FaceId: FaceRecord.M.Face.M.FaceId.S,\n                      }\n                    });\n                  });\n                  item.data = {\n                    FaceRecords: faces\n                  };\n                  output.push(item);\n                }\n                imageids.push(FaceMatch.Face.ImageId);\n              }\n            });\n            var response = {\n              statusCode: 200,\n              output: output\n            };\n            callback(null, response);\n          }\n        });\n      }\n    });\n}\n```\n\n#### Process New Image\n1. Download image from S3 (finpics-pics)\n2. Create thumbnail\n3. Upload thumbnail to S3 (finpics-thumbs)\n4. Add feature picture for album, if needed\n5. Index image using Rekognition\n6. Add image and metadata to DynamoDB\n\n```\n  s3: function(event, context, callback) {\n\n    winston.info(\"Reading options from event:\\n\", util.inspect(event, {depth: 5}));\n    var srcBucket = event.Records[0].s3.bucket.name;\n    // Object key may have spaces or unicode non-ASCII characters.\n    var srcKey    =\n        decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, \" \"));\n    var dstBucket = S3_THUMBS_BUCKET;\n    var dstKey    = srcKey;\n\n    // Sanity check: validate that source and destination are different buckets.\n    if (srcBucket == dstBucket) {\n      callback(\"Source and destination buckets are the same.\");\n      return;\n    }\n\n    // Infer the image type.\n    var typeMatch = srcKey.match(/\\.([^.]*)$/);\n    if (!typeMatch) {\n      callback(\"Could not determine the image type.\");\n      return;\n    }\n    var imageType = _.toLower(typeMatch[1]);\n    if (imageType != \"jpg\" && imageType != \"jpeg\" && imageType != \"png\") {\n      callback('Unsupported image type: ${imageType}');\n      return;\n    }\n\n    // Download the image from S3, transform, and upload to a different S3 bucket.\n    async.waterfall([\n          function download(next) {\n            // Download the image from S3 into a buffer.\n            s3.getObject({\n                  Bucket: srcBucket,\n                  Key: srcKey\n                },\n                next);\n          },\n          function transform(response, next) {\n            gm(response.Body).size(function(err, size) {\n              // Infer the scaling factor to avoid stretching the image unnaturally.\n              var scalingFactor = Math.min(\n                  MAX_WIDTH / size.width,\n                  MAX_HEIGHT / size.height\n              );\n              var width  = scalingFactor * size.width;\n              var height = scalingFactor * size.height;\n\n              // Transform the image buffer in memory.\n              this.resize(width, height).autoOrient()\n                  .toBuffer(imageType, function(err, buffer) {\n                    if (err) {\n                      next(err);\n                    } else {\n                      next(null, response.ContentType, buffer);\n                    }\n                  });\n            });\n          },\n          function upload(contentType, data, next) {\n            // Stream the transformed image to a different S3 bucket.\n            s3.putObject({\n                  Bucket: dstBucket,\n                  Key: dstKey,\n                  Body: data,\n                  ContentType: contentType,\n                  StorageClass: 'REDUCED_REDUNDANCY'\n                },\n                next);\n          },\n          function add_feature_pic(response, next) {\n            var image_parts = _.drop(_.split(srcKey, '/'));\n            var params = {\n              TableName: 'pics',\n              Key: {\n                primarykey: '/',\n                sortkey: _.head(image_parts)\n              },\n              UpdateExpression: \"set pic = :pic\",\n              ConditionExpression: \"attribute_not_exists(pic)\",\n              ExpressionAttributeValues:{\n                ':pic': _.last(image_parts)\n              }\n            };\n            winston.info(JSON.stringify(params));\n            docClient.update(params, function(err, results) {\n              if (err && _.isEqual(err.code, 'ConditionalCheckFailedException')) next(null, null);\n              else next(err, results);\n            });\n          },\n          function rekognize(response, next) {\n            var params = {\n              CollectionId: COLLECTION_ID, /* required */\n              Image: { /* required */\n                S3Object: {\n                  Bucket: srcBucket,\n                  Name: srcKey\n                }\n              }\n            };\n            winston.info('Index faces');\n            winston.info(JSON.stringify(params));\n            rekognition.indexFaces(params, next);\n          },\n          function add_pics(data, next) {\n            var image_parts = _.drop(_.split(srcKey, '/'));\n            var item = {\n              primarykey: _.head(image_parts),\n              sortkey: _.nth(image_parts, 1),\n              data: data\n            };\n            var params = {\n              TableName: 'pics',\n              Item: item\n            };\n            winston.info('Put DynamoDB');\n            winston.info(JSON.stringify(params));\n            docClient.put(params, function(err, respose) {\n              if (err)  winston.error(err);\n              next(err, data);\n            });\n          },\n          function add_pics_by_image_id(data, next) {\n            if (!_.isNil(data) && !_.isNil(data.FaceRecords) && !_.isEmpty(data.FaceRecords) &&\n                !_.isNil(data.FaceRecords[0].Face) && !_.isNil(data.FaceRecords[0].Face.ImageId)) {\n              var image_parts = _.drop(_.split(srcKey, '/'));\n              var item = {\n                image_id: data.FaceRecords[0].Face.ImageId,\n                data: data,\n                image_path: _.join(image_parts, '/')\n              };\n              var params = {\n                TableName: 'pics_by_image_id',\n                Item: item\n              };\n              winston.info('Put DynamoDB');\n              winston.info(JSON.stringify(params));\n              docClient.put(params, next);\n            } else next(null, null);\n          }\n        ], function (err) {\n          if (err) {\n            winston.error(\n                'Unable to resize ' + srcBucket + '/' + srcKey +\n                ' and upload to ' + dstBucket + '/' + dstKey +\n                ' due to an error: ' + err\n            );\n          } else {\n            winston.info(\n                'Successfully resized ' + srcBucket + '/' + srcKey +\n                ' and uploaded to ' + dstBucket + '/' + dstKey\n            );\n          }\n\n          callback(null, \"message\");\n        }\n    );\n  }\n```\n\nThanks for reading my blog post.  Please let me know if you have any questions.\n\nHere is the [source code](https://github.com/rgfindl/finpics).\nHere is the [demo (finpics.com)](http://finpics.com).\n\nThere are a bunch of untilities [here](https://github.com/rgfindl/finpics/blob/master/util).  I had a lot of images already that I had to process using [this script](https://github.com/rgfindl/finpics/blob/master/util/process-existing-images.js).","slug":"rekognize-your-serverless-photo-album","published":1,"updated":"2017-08-07T20:26:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63lyzjy00019hftfnqxoqve","content":"<p>In this blog post I explain how I used AWS to build a serverless photo album with facial recognition.  This is not a step-by-step tutorial but rather an overview of the architecture, setup, and code.</p>\n<p>I started my online photo album, finpics.com, back in 1999.  I originally built finpics.com using php and mysql.<br>I also had a custom Java Applet to upload the images.  Pretty cool, right.</p>\n<p>Code: <a href=\"https://github.com/rgfindl/finpics\" target=\"_blank\" rel=\"external\">https://github.com/rgfindl/finpics</a><br>Website: <a href=\"http://finpics.com\" target=\"_blank\" rel=\"external\">http://finpics.com</a></p>\n\n<img src=\"/images/finpics-03.png\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\">\n\n<h3 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h3><p>Serverless architectures refer to applications that significantly depend on third-party services (knows as Backend as a Service or “BaaS”) or on custom code that’s run in ephemeral containers (Function as a Service or “FaaS”), the best known vendor host of which currently is AWS Lambda. <a href=\"http://martinfowler.com/articles/serverless.html\" target=\"_blank\" rel=\"external\">http://martinfowler.com/articles/serverless.html</a></p>\n<h3 id=\"finpics-com\"><a href=\"#finpics-com\" class=\"headerlink\" title=\"finpics.com\"></a>finpics.com</h3><p>finpics.com gets almost no traffic.  Good thing too because there are a lot of embarrassing picture of myself, family, and friends. A serverless architectures is more cost effective because I’m not paying for a server to run that gets very little traffic. There is also very little maintenance with serverless apps.</p>\n<p>Once AWS Rekognition was released I knew that I wanted to use it to improve the searchability of finpics.com.  It is great to click on someones face and see more pictures of them.</p>\n<h3 id=\"AWS-resources\"><a href=\"#AWS-resources\" class=\"headerlink\" title=\"AWS resources\"></a>AWS resources</h3><table>\n<thead>\n<tr>\n<th>AWS Resource</th>\n<th>Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Route53</td>\n<td>DNS for finpics.com, points to static S3 bucket.</td>\n</tr>\n<tr>\n<td>S3</td>\n<td>Hosts static website and images.</td>\n</tr>\n<tr>\n<td>Cognito</td>\n<td>Authorization. Lets the web client assume an IAM Role to make calls to AWS resources.</td>\n</tr>\n<tr>\n<td>DynamoDB</td>\n<td>Store image metadata.</td>\n</tr>\n<tr>\n<td>Lambda</td>\n<td>Serverless compute.</td>\n</tr>\n<tr>\n<td>Rekognition</td>\n<td>Facial recognition.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><h3 id=\"Web-Requests\"><a href=\"#Web-Requests\" class=\"headerlink\" title=\"Web Requests\"></a>Web Requests</h3><img src=\"/images/finpics-01.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\">\n<p><strong>Static Web Site</strong><br>Fetch the html, js, css, and image assets directly from S3.</p>\n<p><strong>Get Unauth Creds</strong><br>Make a call to Cognito to get AWS credentials to use for all the calls to AWS.  The user assumes the unauthenticated IAM role that you define in Cognito.</p>\n<p><strong>Fetch Pictures</strong><br>The pictures are structured into picture sets.  A call is made to DynamoDB to get all the picture sets, and the featured pic for each set.  Then another call is made to DynamoDB to get the pictures for each set.</p>\n<p><strong>Search Faces</strong><br>Search Rekognition given a face id.  When you click on a persons face the results are pictures with that face sorted by highest probability.</p>\n<h3 id=\"Upload-Images\"><a href=\"#Upload-Images\" class=\"headerlink\" title=\"Upload Images\"></a>Upload Images</h3><p>Images are uploaded directly to S3.  There is an S3 event that triggers a Lambda function to perform the following tasks on each new image:</p>\n<ul>\n<li>Create a thumbnail</li>\n<li>Index the faces with Rekognition</li>\n<li>Store metadata in DynamoDB</li>\n</ul>\n<p>I have a <a href=\"https://github.com/rgfindl/finpics/blob/master/util/upload-pics.js\" target=\"_blank\" rel=\"external\">script</a> that uploads a new picture set.<br><img src=\"/images/finpics-02.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"></p>\n<h2 id=\"DynamoDB-Tables\"><a href=\"#DynamoDB-Tables\" class=\"headerlink\" title=\"DynamoDB Tables\"></a>DynamoDB Tables</h2><h3 id=\"pics-table\"><a href=\"#pics-table\" class=\"headerlink\" title=\"pics table\"></a>pics table</h3><ul>\n<li>primaykey (Primary Key)</li>\n<li>sortKey (Sort Key)</li>\n<li>data (Rekognition IndexFaces response)</li>\n</ul>\n<p>The pics table stores all the picture sets, with featured image, which is used by the <a href=\"http://finpics.com\" target=\"_blank\" rel=\"external\">index</a> page.</p>\n<p><strong>Picsets</strong></p>\n<ul>\n<li>primaykey: ‘/‘ (Primary Key)</li>\n<li>sortkey: ‘014_newportboston’ (Sort Key)</li>\n<li>pic: ‘Newport_pic_3.jpg’</li>\n</ul>\n<p>The pics table also stores all the pictures associated with a picture set, which is used by each <a href=\"http://finpics.com/#!/picset?path=280_pic_set_282\" target=\"_blank\" rel=\"external\">picture set</a> page.<br><strong>Pics</strong></p>\n<ul>\n<li>primaykey: ‘014_newportboston’ (Primary Key)</li>\n<li>sortkey: ‘Newport_pic_3.jpg’ (Sort Key)</li>\n<li>… Rekognition IndexFaces response</li>\n</ul>\n<h3 id=\"pics-by-image-id-table\"><a href=\"#pics-by-image-id-table\" class=\"headerlink\" title=\"pics_by_image_id table\"></a>pics_by_image_id table</h3><ul>\n<li>image_id (Primary Key)</li>\n<li>data (Rekognition IndexFaces response)</li>\n<li>image_path</li>\n</ul>\n<p>The pics_by_image_id table stores the same facial recognition data as the pics table but is index by the AWS Rekognition image_id.  When we search Rekognition for facial matches we use the image_id’s in the response to fetch the picture information via this table.</p>\n<h2 id=\"Setup-amp-Code-Samples\"><a href=\"#Setup-amp-Code-Samples\" class=\"headerlink\" title=\"Setup &amp; Code Samples\"></a>Setup &amp; Code Samples</h2><h3 id=\"AWS-S3\"><a href=\"#AWS-S3\" class=\"headerlink\" title=\"AWS S3\"></a>AWS S3</h3><p>I’m using 3 buckets for finpics.com.</p>\n<ul>\n<li><strong>finpics.com</strong> which serves the static web content.</li>\n<li><strong>finpics-pics</strong> which serves the original (large) images.</li>\n<li><strong>finpics-thumbs</strong> which serves the thumbnails.</li>\n</ul>\n<p>I used different buckets for 2 reasons:</p>\n<ol>\n<li>AWS Rekognition fails when your bucket name has a period in it.  Awesome!</li>\n<li>For every new picture added to <strong>finpics-pics</strong> a Lambda function is triggered to create the thumbnail.  I didn’t want to create a circular loop.</li>\n</ol>\n<p>For each bucket I have <strong>Web Hosting</strong> enabled.</p>\n<p>I want all assets in these 3 buckets to be publicly available.  Under <strong>Permissions</strong> I have the following <strong>bucket policy</strong> for each.  Make sure to change the Resource name to match your bucket name.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;Version&quot;: &quot;2008-10-17&quot;,</div><div class=\"line\">\t&quot;Statement&quot;: [</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t&quot;Sid&quot;: &quot;PublicReadForGetBucketObjects&quot;,</div><div class=\"line\">\t\t\t&quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">\t\t\t&quot;Principal&quot;: &#123;</div><div class=\"line\">\t\t\t\t&quot;AWS&quot;: &quot;*&quot;</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t&quot;Action&quot;: &quot;s3:GetObject&quot;,</div><div class=\"line\">\t\t\t&quot;Resource&quot;: &quot;arn:aws:s3:::finpics-pics/*&quot;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now all my web assets are publicly available and served via S3.  Cheap, serverless, and performant.</p>\n<h3 id=\"AWS-Cognito\"><a href=\"#AWS-Cognito\" class=\"headerlink\" title=\"AWS Cognito\"></a>AWS Cognito</h3><p>Cognito allows the client-side JavaScript code permission to access AWS resources like DynamoDD &amp; Lambda functions.</p>\n<p>I created a Cognito <strong>Federated Identity</strong> called <code>finpics</code>.  When creating this identity I <strong>Enabled access to unauthenticated identities</strong>.  I also created new Unauthenticated and Authenticated AWS IAM Roles.  I’ll explain the permissions needed within Unauthenticated role later.  I’m currently not using the Authenticated role.</p>\n<img src=\"/images/finpics-04.png\" style=\"border: solid 1px #eee; padding: 5px;\">\n<p>In the client-side JavaScript code I assume the Unathenticated role like this.  All subsequent calls to AWS will use this IAM role.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Initialize the Amazon Cognito credentials provider</div><div class=\"line\">AWS.config.region = &apos;us-east-1&apos;; // Region</div><div class=\"line\">AWS.config.credentials = new AWS.CognitoIdentityCredentials(&#123;</div><div class=\"line\">    IdentityPoolId: &apos;your-id&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"IAM-Roles\"><a href=\"#IAM-Roles\" class=\"headerlink\" title=\"IAM Roles\"></a>IAM Roles</h3><h4 id=\"Cognito-Unathenticated-Role\"><a href=\"#Cognito-Unathenticated-Role\" class=\"headerlink\" title=\"Cognito Unathenticated Role\"></a>Cognito Unathenticated Role</h4><p>Cognito will automatically create the Unathenticated role and setup the <strong>Trust Relationship</strong> with the Cognito federated identity.</p>\n<p>Here are the permissions:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</div><div class=\"line\">    &quot;Statement&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;mobileanalytics:PutEvents&quot;,</div><div class=\"line\">                &quot;cognito-sync:*&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481636027000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;dynamodb:GetItem&quot;,</div><div class=\"line\">                &quot;dynamodb:GetRecords&quot;,</div><div class=\"line\">                &quot;dynamodb:Query&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:dynamodb:us-east-1:132093761664:table/pics&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481853728000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;lambda:InvokeFunction&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:lambda:us-east-1:132093761664:function:finpics-dev-search&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>The first is permission is sync the user with Cognito (Cognito stuff).</li>\n<li>The second permission is to get picture data and metadata from DynamoDB.</li>\n<li>The third permission is to invoke our Lambda function.</li>\n</ol>\n<h4 id=\"Lambda-Role\"><a href=\"#Lambda-Role\" class=\"headerlink\" title=\"Lambda Role\"></a>Lambda Role</h4><p>The Lambda role has permissions to interact with the S3 buckets, DynamoDB tables, and the Rekognition collection (which I will create next).  Lambda also has permission to CloudWatch logs.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</div><div class=\"line\">    &quot;Statement&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481315917000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;s3:*&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:s3:::finpics-pics/*&quot;,</div><div class=\"line\">                &quot;arn:aws:s3:::finpics-thumbs/*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481636027000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;dynamodb:GetItem&quot;,</div><div class=\"line\">                &quot;dynamodb:GetRecords&quot;,</div><div class=\"line\">                &quot;dynamodb:Query&quot;,</div><div class=\"line\">                &quot;dynamodb:BatchGetItem&quot;,</div><div class=\"line\">                &quot;dynamodb:PutItem&quot;,</div><div class=\"line\">                &quot;dynamodb:UpdateItem&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:dynamodb:us-east-1:132093761664:table/pics&quot;,</div><div class=\"line\">                &quot;arn:aws:dynamodb:us-east-1:132093761664:table/pics_by_image_id&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481823471000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;rekognition:CompareFaces&quot;,</div><div class=\"line\">                &quot;rekognition:ListFaces&quot;,</div><div class=\"line\">                &quot;rekognition:SearchFaces&quot;,</div><div class=\"line\">                &quot;rekognition:SearchFacesByImage&quot;,</div><div class=\"line\">                &quot;rekognition:IndexFaces&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:rekognition:us-east-1:132093761664:collection/finpics/person/*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1482175623000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;logs:CreateLogGroup&quot;,</div><div class=\"line\">                &quot;logs:CreateLogStream&quot;,</div><div class=\"line\">                &quot;logs:PutLogEvents&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:logs:us-east-1:132093761664:log-group:/aws/lambda/*:*:*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Rekognition\"><a href=\"#Rekognition\" class=\"headerlink\" title=\"Rekognition\"></a>Rekognition</h3><p>Amazon Rekognition is a service that makes it easy to add image analysis to your applications. With Rekognition, you can detect objects, scenes, and faces in images. You can also search and compare faces. Rekognition’s API enables you to quickly add sophisticated deep learning-based visual search and image classification to your applications.</p>\n<p>To start indexing faces we first need to create a Rekognition collection.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var AWS = require(&apos;aws-sdk&apos;);</div><div class=\"line\">var rekognition = new AWS.Rekognition(&#123;apiVersion: &apos;2016-06-27&apos;&#125;);</div><div class=\"line\"></div><div class=\"line\">var params = &#123;</div><div class=\"line\">    CollectionId: &apos;finpics&apos; /* required */</div><div class=\"line\">&#125;;</div><div class=\"line\">rekognition.createCollection(params, function(err, data) &#123;</div><div class=\"line\">    if (err) console.log(err, err.stack); // an error occurred</div><div class=\"line\">    else     console.log(data);           // successful response</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>When an image is added to S3 our Lambda function is triggered.  The Lambda function indexes the image which adds all the faces within that image to the Rekognition collection.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var params = &#123;</div><div class=\"line\">    CollectionId: &apos;finpics&apos;, /* required */</div><div class=\"line\">    Image: &#123; /* required */</div><div class=\"line\">        S3Object: &#123;</div><div class=\"line\">            Bucket: &apos;finpics-pics&apos;,</div><div class=\"line\">            Name: key</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">rekognition.indexFaces(params, function(err, data) &#123;</div><div class=\"line\">    if (err)  winston.error(err);</div><div class=\"line\">    callback(err, data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>When a user clicks on a face we search the Rekognition collection to find matches ordered by match probability.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var AWS = require(&apos;aws-sdk&apos;);</div><div class=\"line\">var rekognition = new AWS.Rekognition(&#123;apiVersion: &apos;2016-06-27&apos;&#125;);</div><div class=\"line\"></div><div class=\"line\">var params = &#123;</div><div class=\"line\">    CollectionId: &apos;finpics&apos;, /* required */</div><div class=\"line\">    FaceId: faceid</div><div class=\"line\">&#125;;</div><div class=\"line\">rekognition.searchFaces(params, function (err, data) &#123;</div><div class=\"line\">    if (err)  winston.error(err);</div><div class=\"line\">    callback(err, data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Lambda-Functions\"><a href=\"#Lambda-Functions\" class=\"headerlink\" title=\"Lambda Functions\"></a>Lambda Functions</h3><p>There are two Lambda functions:</p>\n<ol>\n<li>Search - search the Rekognition facial collection given a <code>faceid</code>.</li>\n<li>Process New Image - Triggered for each new image added to S3.<ul>\n<li>Creates a thumbnail</li>\n<li>Indexes the image within the Rekognition collection</li>\n<li>Adds image and metadata to DynamoDB</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://github.com/rgfindl/finpics/blob/master/lambda/index.js\" target=\"_blank\" rel=\"external\">Lambda functions</a></p>\n<h4 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h4><ol>\n<li>Search the Rekognition collection.</li>\n<li>Bulk fetch the images from DynamoDB.</li>\n<li>Normalize the DynamoDB results.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">search: function(event, context, callback) &#123;</div><div class=\"line\">    //</div><div class=\"line\">    // Search AWS Rekognition given the faceid.</div><div class=\"line\">    //</div><div class=\"line\">    var params = &#123;</div><div class=\"line\">      CollectionId: &apos;finpics&apos;, /* required */</div><div class=\"line\">      FaceId: event.faceid</div><div class=\"line\">    &#125;;</div><div class=\"line\">    rekognition.searchFaces(params, function (err, data) &#123;</div><div class=\"line\">      if (err) &#123;</div><div class=\"line\">        var response = &#123;</div><div class=\"line\">          statusCode: 500,</div><div class=\"line\">          err: err,</div><div class=\"line\">          params: params</div><div class=\"line\">        &#125;;</div><div class=\"line\">        callback(null, response);</div><div class=\"line\">      &#125; else &#123;</div><div class=\"line\">        //</div><div class=\"line\">        // For each face match.  Fetch the image information from DynamoDB.</div><div class=\"line\">        //</div><div class=\"line\">        var keys = [];</div><div class=\"line\">        var imageids = [];</div><div class=\"line\">        _.forEach(data.FaceMatches, function (FaceMatch) &#123;</div><div class=\"line\">          if (!_.includes(imageids, FaceMatch.Face.ImageId)) &#123;</div><div class=\"line\">            keys.push(&#123;&quot;image_id&quot;: &#123;&quot;S&quot;: FaceMatch.Face.ImageId&#125;&#125;);</div><div class=\"line\">            imageids.push(FaceMatch.Face.ImageId);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        var params = &#123;</div><div class=\"line\">          &quot;RequestItems&quot;: &#123;</div><div class=\"line\">            &quot;pics_by_image_id&quot;: &#123;</div><div class=\"line\">              &quot;Keys&quot;: _.slice(keys, 0, 100)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        dynamodb.batchGetItem(params, function (err, results) &#123;</div><div class=\"line\">          if (err) &#123;</div><div class=\"line\">            var response = &#123;</div><div class=\"line\">              statusCode: 500,</div><div class=\"line\">              err: err,</div><div class=\"line\">              params: params</div><div class=\"line\">            &#125;;</div><div class=\"line\">            callback(null, response);</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            //</div><div class=\"line\">            // Normalize the images we get back from the DynamoDB bulk get request.</div><div class=\"line\">            //</div><div class=\"line\">            var output = [];</div><div class=\"line\">            var imageids = [];</div><div class=\"line\">            _.forEach(data.FaceMatches, function (FaceMatch) &#123;</div><div class=\"line\">              if (!_.includes(imageids, FaceMatch.Face.ImageId)) &#123;</div><div class=\"line\">                var raw_item = _.find(results.Responses.pics_by_image_id, &#123;image_id: &#123;S: FaceMatch.Face.ImageId&#125;&#125;);</div><div class=\"line\">                if (!_.isNil(raw_item)) &#123;</div><div class=\"line\">                  var item = &#123;</div><div class=\"line\">                    image_id: raw_item.image_id.S,</div><div class=\"line\">                    image_path: raw_item.image_path.S</div><div class=\"line\">                  &#125;;</div><div class=\"line\">                  var faces = [];</div><div class=\"line\">                  _.forEach(raw_item.data.M.FaceRecords.L, function (FaceRecord) &#123;</div><div class=\"line\">                    faces.push(&#123;</div><div class=\"line\">                      Face: &#123;</div><div class=\"line\">                        Confidence: FaceRecord.M.Face.M.Confidence.N,</div><div class=\"line\">                        ImageId: FaceRecord.M.Face.M.ImageId.S,</div><div class=\"line\">                        BoundingBox: &#123;</div><div class=\"line\">                          Top: FaceRecord.M.Face.M.BoundingBox.M.Top.N,</div><div class=\"line\">                          Height: FaceRecord.M.Face.M.BoundingBox.M.Height.N,</div><div class=\"line\">                          Width: FaceRecord.M.Face.M.BoundingBox.M.Width.N,</div><div class=\"line\">                          Left: FaceRecord.M.Face.M.BoundingBox.M.Left.N</div><div class=\"line\">                        &#125;,</div><div class=\"line\">                        FaceId: FaceRecord.M.Face.M.FaceId.S,</div><div class=\"line\">                      &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                  &#125;);</div><div class=\"line\">                  item.data = &#123;</div><div class=\"line\">                    FaceRecords: faces</div><div class=\"line\">                  &#125;;</div><div class=\"line\">                  output.push(item);</div><div class=\"line\">                &#125;</div><div class=\"line\">                imageids.push(FaceMatch.Face.ImageId);</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            var response = &#123;</div><div class=\"line\">              statusCode: 200,</div><div class=\"line\">              output: output</div><div class=\"line\">            &#125;;</div><div class=\"line\">            callback(null, response);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Process-New-Image\"><a href=\"#Process-New-Image\" class=\"headerlink\" title=\"Process New Image\"></a>Process New Image</h4><ol>\n<li>Download image from S3 (finpics-pics)</li>\n<li>Create thumbnail</li>\n<li>Upload thumbnail to S3 (finpics-thumbs)</li>\n<li>Add feature picture for album, if needed</li>\n<li>Index image using Rekognition</li>\n<li>Add image and metadata to DynamoDB</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div></pre></td><td class=\"code\"><pre><div class=\"line\">s3: function(event, context, callback) &#123;</div><div class=\"line\"></div><div class=\"line\">  winston.info(&quot;Reading options from event:\\n&quot;, util.inspect(event, &#123;depth: 5&#125;));</div><div class=\"line\">  var srcBucket = event.Records[0].s3.bucket.name;</div><div class=\"line\">  // Object key may have spaces or unicode non-ASCII characters.</div><div class=\"line\">  var srcKey    =</div><div class=\"line\">      decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, &quot; &quot;));</div><div class=\"line\">  var dstBucket = S3_THUMBS_BUCKET;</div><div class=\"line\">  var dstKey    = srcKey;</div><div class=\"line\"></div><div class=\"line\">  // Sanity check: validate that source and destination are different buckets.</div><div class=\"line\">  if (srcBucket == dstBucket) &#123;</div><div class=\"line\">    callback(&quot;Source and destination buckets are the same.&quot;);</div><div class=\"line\">    return;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Infer the image type.</div><div class=\"line\">  var typeMatch = srcKey.match(/\\.([^.]*)$/);</div><div class=\"line\">  if (!typeMatch) &#123;</div><div class=\"line\">    callback(&quot;Could not determine the image type.&quot;);</div><div class=\"line\">    return;</div><div class=\"line\">  &#125;</div><div class=\"line\">  var imageType = _.toLower(typeMatch[1]);</div><div class=\"line\">  if (imageType != &quot;jpg&quot; &amp;&amp; imageType != &quot;jpeg&quot; &amp;&amp; imageType != &quot;png&quot;) &#123;</div><div class=\"line\">    callback(&apos;Unsupported image type: $&#123;imageType&#125;&apos;);</div><div class=\"line\">    return;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Download the image from S3, transform, and upload to a different S3 bucket.</div><div class=\"line\">  async.waterfall([</div><div class=\"line\">        function download(next) &#123;</div><div class=\"line\">          // Download the image from S3 into a buffer.</div><div class=\"line\">          s3.getObject(&#123;</div><div class=\"line\">                Bucket: srcBucket,</div><div class=\"line\">                Key: srcKey</div><div class=\"line\">              &#125;,</div><div class=\"line\">              next);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function transform(response, next) &#123;</div><div class=\"line\">          gm(response.Body).size(function(err, size) &#123;</div><div class=\"line\">            // Infer the scaling factor to avoid stretching the image unnaturally.</div><div class=\"line\">            var scalingFactor = Math.min(</div><div class=\"line\">                MAX_WIDTH / size.width,</div><div class=\"line\">                MAX_HEIGHT / size.height</div><div class=\"line\">            );</div><div class=\"line\">            var width  = scalingFactor * size.width;</div><div class=\"line\">            var height = scalingFactor * size.height;</div><div class=\"line\"></div><div class=\"line\">            // Transform the image buffer in memory.</div><div class=\"line\">            this.resize(width, height).autoOrient()</div><div class=\"line\">                .toBuffer(imageType, function(err, buffer) &#123;</div><div class=\"line\">                  if (err) &#123;</div><div class=\"line\">                    next(err);</div><div class=\"line\">                  &#125; else &#123;</div><div class=\"line\">                    next(null, response.ContentType, buffer);</div><div class=\"line\">                  &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function upload(contentType, data, next) &#123;</div><div class=\"line\">          // Stream the transformed image to a different S3 bucket.</div><div class=\"line\">          s3.putObject(&#123;</div><div class=\"line\">                Bucket: dstBucket,</div><div class=\"line\">                Key: dstKey,</div><div class=\"line\">                Body: data,</div><div class=\"line\">                ContentType: contentType,</div><div class=\"line\">                StorageClass: &apos;REDUCED_REDUNDANCY&apos;</div><div class=\"line\">              &#125;,</div><div class=\"line\">              next);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function add_feature_pic(response, next) &#123;</div><div class=\"line\">          var image_parts = _.drop(_.split(srcKey, &apos;/&apos;));</div><div class=\"line\">          var params = &#123;</div><div class=\"line\">            TableName: &apos;pics&apos;,</div><div class=\"line\">            Key: &#123;</div><div class=\"line\">              primarykey: &apos;/&apos;,</div><div class=\"line\">              sortkey: _.head(image_parts)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            UpdateExpression: &quot;set pic = :pic&quot;,</div><div class=\"line\">            ConditionExpression: &quot;attribute_not_exists(pic)&quot;,</div><div class=\"line\">            ExpressionAttributeValues:&#123;</div><div class=\"line\">              &apos;:pic&apos;: _.last(image_parts)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\">          winston.info(JSON.stringify(params));</div><div class=\"line\">          docClient.update(params, function(err, results) &#123;</div><div class=\"line\">            if (err &amp;&amp; _.isEqual(err.code, &apos;ConditionalCheckFailedException&apos;)) next(null, null);</div><div class=\"line\">            else next(err, results);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function rekognize(response, next) &#123;</div><div class=\"line\">          var params = &#123;</div><div class=\"line\">            CollectionId: COLLECTION_ID, /* required */</div><div class=\"line\">            Image: &#123; /* required */</div><div class=\"line\">              S3Object: &#123;</div><div class=\"line\">                Bucket: srcBucket,</div><div class=\"line\">                Name: srcKey</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\">          winston.info(&apos;Index faces&apos;);</div><div class=\"line\">          winston.info(JSON.stringify(params));</div><div class=\"line\">          rekognition.indexFaces(params, next);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function add_pics(data, next) &#123;</div><div class=\"line\">          var image_parts = _.drop(_.split(srcKey, &apos;/&apos;));</div><div class=\"line\">          var item = &#123;</div><div class=\"line\">            primarykey: _.head(image_parts),</div><div class=\"line\">            sortkey: _.nth(image_parts, 1),</div><div class=\"line\">            data: data</div><div class=\"line\">          &#125;;</div><div class=\"line\">          var params = &#123;</div><div class=\"line\">            TableName: &apos;pics&apos;,</div><div class=\"line\">            Item: item</div><div class=\"line\">          &#125;;</div><div class=\"line\">          winston.info(&apos;Put DynamoDB&apos;);</div><div class=\"line\">          winston.info(JSON.stringify(params));</div><div class=\"line\">          docClient.put(params, function(err, respose) &#123;</div><div class=\"line\">            if (err)  winston.error(err);</div><div class=\"line\">            next(err, data);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function add_pics_by_image_id(data, next) &#123;</div><div class=\"line\">          if (!_.isNil(data) &amp;&amp; !_.isNil(data.FaceRecords) &amp;&amp; !_.isEmpty(data.FaceRecords) &amp;&amp;</div><div class=\"line\">              !_.isNil(data.FaceRecords[0].Face) &amp;&amp; !_.isNil(data.FaceRecords[0].Face.ImageId)) &#123;</div><div class=\"line\">            var image_parts = _.drop(_.split(srcKey, &apos;/&apos;));</div><div class=\"line\">            var item = &#123;</div><div class=\"line\">              image_id: data.FaceRecords[0].Face.ImageId,</div><div class=\"line\">              data: data,</div><div class=\"line\">              image_path: _.join(image_parts, &apos;/&apos;)</div><div class=\"line\">            &#125;;</div><div class=\"line\">            var params = &#123;</div><div class=\"line\">              TableName: &apos;pics_by_image_id&apos;,</div><div class=\"line\">              Item: item</div><div class=\"line\">            &#125;;</div><div class=\"line\">            winston.info(&apos;Put DynamoDB&apos;);</div><div class=\"line\">            winston.info(JSON.stringify(params));</div><div class=\"line\">            docClient.put(params, next);</div><div class=\"line\">          &#125; else next(null, null);</div><div class=\"line\">        &#125;</div><div class=\"line\">      ], function (err) &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">          winston.error(</div><div class=\"line\">              &apos;Unable to resize &apos; + srcBucket + &apos;/&apos; + srcKey +</div><div class=\"line\">              &apos; and upload to &apos; + dstBucket + &apos;/&apos; + dstKey +</div><div class=\"line\">              &apos; due to an error: &apos; + err</div><div class=\"line\">          );</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">          winston.info(</div><div class=\"line\">              &apos;Successfully resized &apos; + srcBucket + &apos;/&apos; + srcKey +</div><div class=\"line\">              &apos; and uploaded to &apos; + dstBucket + &apos;/&apos; + dstKey</div><div class=\"line\">          );</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        callback(null, &quot;message&quot;);</div><div class=\"line\">      &#125;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Thanks for reading my blog post.  Please let me know if you have any questions.</p>\n<p>Here is the <a href=\"https://github.com/rgfindl/finpics\" target=\"_blank\" rel=\"external\">source code</a>.<br>Here is the <a href=\"http://finpics.com\" target=\"_blank\" rel=\"external\">demo (finpics.com)</a>.</p>\n<p>There are a bunch of untilities <a href=\"https://github.com/rgfindl/finpics/blob/master/util\" target=\"_blank\" rel=\"external\">here</a>.  I had a lot of images already that I had to process using <a href=\"https://github.com/rgfindl/finpics/blob/master/util/process-existing-images.js\" target=\"_blank\" rel=\"external\">this script</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this blog post I explain how I used AWS to build a serverless photo album with facial recognition.  This is not a step-by-step tutorial but rather an overview of the architecture, setup, and code.</p>\n<p>I started my online photo album, finpics.com, back in 1999.  I originally built finpics.com using php and mysql.<br>I also had a custom Java Applet to upload the images.  Pretty cool, right.</p>\n<p>Code: <a href=\"https://github.com/rgfindl/finpics\" target=\"_blank\" rel=\"external\">https://github.com/rgfindl/finpics</a><br>Website: <a href=\"http://finpics.com\" target=\"_blank\" rel=\"external\">http://finpics.com</a></p>\n\n<img src=\"/images/finpics-03.png\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\">\n\n<h3 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h3><p>Serverless architectures refer to applications that significantly depend on third-party services (knows as Backend as a Service or “BaaS”) or on custom code that’s run in ephemeral containers (Function as a Service or “FaaS”), the best known vendor host of which currently is AWS Lambda. <a href=\"http://martinfowler.com/articles/serverless.html\" target=\"_blank\" rel=\"external\">http://martinfowler.com/articles/serverless.html</a></p>\n<h3 id=\"finpics-com\"><a href=\"#finpics-com\" class=\"headerlink\" title=\"finpics.com\"></a>finpics.com</h3><p>finpics.com gets almost no traffic.  Good thing too because there are a lot of embarrassing picture of myself, family, and friends. A serverless architectures is more cost effective because I’m not paying for a server to run that gets very little traffic. There is also very little maintenance with serverless apps.</p>\n<p>Once AWS Rekognition was released I knew that I wanted to use it to improve the searchability of finpics.com.  It is great to click on someones face and see more pictures of them.</p>\n<h3 id=\"AWS-resources\"><a href=\"#AWS-resources\" class=\"headerlink\" title=\"AWS resources\"></a>AWS resources</h3><table>\n<thead>\n<tr>\n<th>AWS Resource</th>\n<th>Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Route53</td>\n<td>DNS for finpics.com, points to static S3 bucket.</td>\n</tr>\n<tr>\n<td>S3</td>\n<td>Hosts static website and images.</td>\n</tr>\n<tr>\n<td>Cognito</td>\n<td>Authorization. Lets the web client assume an IAM Role to make calls to AWS resources.</td>\n</tr>\n<tr>\n<td>DynamoDB</td>\n<td>Store image metadata.</td>\n</tr>\n<tr>\n<td>Lambda</td>\n<td>Serverless compute.</td>\n</tr>\n<tr>\n<td>Rekognition</td>\n<td>Facial recognition.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><h3 id=\"Web-Requests\"><a href=\"#Web-Requests\" class=\"headerlink\" title=\"Web Requests\"></a>Web Requests</h3><img src=\"/images/finpics-01.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\">\n<p><strong>Static Web Site</strong><br>Fetch the html, js, css, and image assets directly from S3.</p>\n<p><strong>Get Unauth Creds</strong><br>Make a call to Cognito to get AWS credentials to use for all the calls to AWS.  The user assumes the unauthenticated IAM role that you define in Cognito.</p>\n<p><strong>Fetch Pictures</strong><br>The pictures are structured into picture sets.  A call is made to DynamoDB to get all the picture sets, and the featured pic for each set.  Then another call is made to DynamoDB to get the pictures for each set.</p>\n<p><strong>Search Faces</strong><br>Search Rekognition given a face id.  When you click on a persons face the results are pictures with that face sorted by highest probability.</p>\n<h3 id=\"Upload-Images\"><a href=\"#Upload-Images\" class=\"headerlink\" title=\"Upload Images\"></a>Upload Images</h3><p>Images are uploaded directly to S3.  There is an S3 event that triggers a Lambda function to perform the following tasks on each new image:</p>\n<ul>\n<li>Create a thumbnail</li>\n<li>Index the faces with Rekognition</li>\n<li>Store metadata in DynamoDB</li>\n</ul>\n<p>I have a <a href=\"https://github.com/rgfindl/finpics/blob/master/util/upload-pics.js\" target=\"_blank\" rel=\"external\">script</a> that uploads a new picture set.<br><img src=\"/images/finpics-02.jpg\" width=\"100%\" style=\"border: solid 1px #eee; padding: 5px;\"></p>\n<h2 id=\"DynamoDB-Tables\"><a href=\"#DynamoDB-Tables\" class=\"headerlink\" title=\"DynamoDB Tables\"></a>DynamoDB Tables</h2><h3 id=\"pics-table\"><a href=\"#pics-table\" class=\"headerlink\" title=\"pics table\"></a>pics table</h3><ul>\n<li>primaykey (Primary Key)</li>\n<li>sortKey (Sort Key)</li>\n<li>data (Rekognition IndexFaces response)</li>\n</ul>\n<p>The pics table stores all the picture sets, with featured image, which is used by the <a href=\"http://finpics.com\" target=\"_blank\" rel=\"external\">index</a> page.</p>\n<p><strong>Picsets</strong></p>\n<ul>\n<li>primaykey: ‘/‘ (Primary Key)</li>\n<li>sortkey: ‘014_newportboston’ (Sort Key)</li>\n<li>pic: ‘Newport_pic_3.jpg’</li>\n</ul>\n<p>The pics table also stores all the pictures associated with a picture set, which is used by each <a href=\"http://finpics.com/#!/picset?path=280_pic_set_282\" target=\"_blank\" rel=\"external\">picture set</a> page.<br><strong>Pics</strong></p>\n<ul>\n<li>primaykey: ‘014_newportboston’ (Primary Key)</li>\n<li>sortkey: ‘Newport_pic_3.jpg’ (Sort Key)</li>\n<li>… Rekognition IndexFaces response</li>\n</ul>\n<h3 id=\"pics-by-image-id-table\"><a href=\"#pics-by-image-id-table\" class=\"headerlink\" title=\"pics_by_image_id table\"></a>pics_by_image_id table</h3><ul>\n<li>image_id (Primary Key)</li>\n<li>data (Rekognition IndexFaces response)</li>\n<li>image_path</li>\n</ul>\n<p>The pics_by_image_id table stores the same facial recognition data as the pics table but is index by the AWS Rekognition image_id.  When we search Rekognition for facial matches we use the image_id’s in the response to fetch the picture information via this table.</p>\n<h2 id=\"Setup-amp-Code-Samples\"><a href=\"#Setup-amp-Code-Samples\" class=\"headerlink\" title=\"Setup &amp; Code Samples\"></a>Setup &amp; Code Samples</h2><h3 id=\"AWS-S3\"><a href=\"#AWS-S3\" class=\"headerlink\" title=\"AWS S3\"></a>AWS S3</h3><p>I’m using 3 buckets for finpics.com.</p>\n<ul>\n<li><strong>finpics.com</strong> which serves the static web content.</li>\n<li><strong>finpics-pics</strong> which serves the original (large) images.</li>\n<li><strong>finpics-thumbs</strong> which serves the thumbnails.</li>\n</ul>\n<p>I used different buckets for 2 reasons:</p>\n<ol>\n<li>AWS Rekognition fails when your bucket name has a period in it.  Awesome!</li>\n<li>For every new picture added to <strong>finpics-pics</strong> a Lambda function is triggered to create the thumbnail.  I didn’t want to create a circular loop.</li>\n</ol>\n<p>For each bucket I have <strong>Web Hosting</strong> enabled.</p>\n<p>I want all assets in these 3 buckets to be publicly available.  Under <strong>Permissions</strong> I have the following <strong>bucket policy</strong> for each.  Make sure to change the Resource name to match your bucket name.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;Version&quot;: &quot;2008-10-17&quot;,</div><div class=\"line\">\t&quot;Statement&quot;: [</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t&quot;Sid&quot;: &quot;PublicReadForGetBucketObjects&quot;,</div><div class=\"line\">\t\t\t&quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">\t\t\t&quot;Principal&quot;: &#123;</div><div class=\"line\">\t\t\t\t&quot;AWS&quot;: &quot;*&quot;</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t&quot;Action&quot;: &quot;s3:GetObject&quot;,</div><div class=\"line\">\t\t\t&quot;Resource&quot;: &quot;arn:aws:s3:::finpics-pics/*&quot;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now all my web assets are publicly available and served via S3.  Cheap, serverless, and performant.</p>\n<h3 id=\"AWS-Cognito\"><a href=\"#AWS-Cognito\" class=\"headerlink\" title=\"AWS Cognito\"></a>AWS Cognito</h3><p>Cognito allows the client-side JavaScript code permission to access AWS resources like DynamoDD &amp; Lambda functions.</p>\n<p>I created a Cognito <strong>Federated Identity</strong> called <code>finpics</code>.  When creating this identity I <strong>Enabled access to unauthenticated identities</strong>.  I also created new Unauthenticated and Authenticated AWS IAM Roles.  I’ll explain the permissions needed within Unauthenticated role later.  I’m currently not using the Authenticated role.</p>\n<img src=\"/images/finpics-04.png\" style=\"border: solid 1px #eee; padding: 5px;\">\n<p>In the client-side JavaScript code I assume the Unathenticated role like this.  All subsequent calls to AWS will use this IAM role.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Initialize the Amazon Cognito credentials provider</div><div class=\"line\">AWS.config.region = &apos;us-east-1&apos;; // Region</div><div class=\"line\">AWS.config.credentials = new AWS.CognitoIdentityCredentials(&#123;</div><div class=\"line\">    IdentityPoolId: &apos;your-id&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"IAM-Roles\"><a href=\"#IAM-Roles\" class=\"headerlink\" title=\"IAM Roles\"></a>IAM Roles</h3><h4 id=\"Cognito-Unathenticated-Role\"><a href=\"#Cognito-Unathenticated-Role\" class=\"headerlink\" title=\"Cognito Unathenticated Role\"></a>Cognito Unathenticated Role</h4><p>Cognito will automatically create the Unathenticated role and setup the <strong>Trust Relationship</strong> with the Cognito federated identity.</p>\n<p>Here are the permissions:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</div><div class=\"line\">    &quot;Statement&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;mobileanalytics:PutEvents&quot;,</div><div class=\"line\">                &quot;cognito-sync:*&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481636027000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;dynamodb:GetItem&quot;,</div><div class=\"line\">                &quot;dynamodb:GetRecords&quot;,</div><div class=\"line\">                &quot;dynamodb:Query&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:dynamodb:us-east-1:132093761664:table/pics&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481853728000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;lambda:InvokeFunction&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:lambda:us-east-1:132093761664:function:finpics-dev-search&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>The first is permission is sync the user with Cognito (Cognito stuff).</li>\n<li>The second permission is to get picture data and metadata from DynamoDB.</li>\n<li>The third permission is to invoke our Lambda function.</li>\n</ol>\n<h4 id=\"Lambda-Role\"><a href=\"#Lambda-Role\" class=\"headerlink\" title=\"Lambda Role\"></a>Lambda Role</h4><p>The Lambda role has permissions to interact with the S3 buckets, DynamoDB tables, and the Rekognition collection (which I will create next).  Lambda also has permission to CloudWatch logs.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</div><div class=\"line\">    &quot;Statement&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481315917000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;s3:*&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:s3:::finpics-pics/*&quot;,</div><div class=\"line\">                &quot;arn:aws:s3:::finpics-thumbs/*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481636027000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;dynamodb:GetItem&quot;,</div><div class=\"line\">                &quot;dynamodb:GetRecords&quot;,</div><div class=\"line\">                &quot;dynamodb:Query&quot;,</div><div class=\"line\">                &quot;dynamodb:BatchGetItem&quot;,</div><div class=\"line\">                &quot;dynamodb:PutItem&quot;,</div><div class=\"line\">                &quot;dynamodb:UpdateItem&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:dynamodb:us-east-1:132093761664:table/pics&quot;,</div><div class=\"line\">                &quot;arn:aws:dynamodb:us-east-1:132093761664:table/pics_by_image_id&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1481823471000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;rekognition:CompareFaces&quot;,</div><div class=\"line\">                &quot;rekognition:ListFaces&quot;,</div><div class=\"line\">                &quot;rekognition:SearchFaces&quot;,</div><div class=\"line\">                &quot;rekognition:SearchFacesByImage&quot;,</div><div class=\"line\">                &quot;rekognition:IndexFaces&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:rekognition:us-east-1:132093761664:collection/finpics/person/*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;Sid&quot;: &quot;Stmt1482175623000&quot;,</div><div class=\"line\">            &quot;Effect&quot;: &quot;Allow&quot;,</div><div class=\"line\">            &quot;Action&quot;: [</div><div class=\"line\">                &quot;logs:CreateLogGroup&quot;,</div><div class=\"line\">                &quot;logs:CreateLogStream&quot;,</div><div class=\"line\">                &quot;logs:PutLogEvents&quot;</div><div class=\"line\">            ],</div><div class=\"line\">            &quot;Resource&quot;: [</div><div class=\"line\">                &quot;arn:aws:logs:us-east-1:132093761664:log-group:/aws/lambda/*:*:*&quot;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Rekognition\"><a href=\"#Rekognition\" class=\"headerlink\" title=\"Rekognition\"></a>Rekognition</h3><p>Amazon Rekognition is a service that makes it easy to add image analysis to your applications. With Rekognition, you can detect objects, scenes, and faces in images. You can also search and compare faces. Rekognition’s API enables you to quickly add sophisticated deep learning-based visual search and image classification to your applications.</p>\n<p>To start indexing faces we first need to create a Rekognition collection.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var AWS = require(&apos;aws-sdk&apos;);</div><div class=\"line\">var rekognition = new AWS.Rekognition(&#123;apiVersion: &apos;2016-06-27&apos;&#125;);</div><div class=\"line\"></div><div class=\"line\">var params = &#123;</div><div class=\"line\">    CollectionId: &apos;finpics&apos; /* required */</div><div class=\"line\">&#125;;</div><div class=\"line\">rekognition.createCollection(params, function(err, data) &#123;</div><div class=\"line\">    if (err) console.log(err, err.stack); // an error occurred</div><div class=\"line\">    else     console.log(data);           // successful response</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>When an image is added to S3 our Lambda function is triggered.  The Lambda function indexes the image which adds all the faces within that image to the Rekognition collection.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var params = &#123;</div><div class=\"line\">    CollectionId: &apos;finpics&apos;, /* required */</div><div class=\"line\">    Image: &#123; /* required */</div><div class=\"line\">        S3Object: &#123;</div><div class=\"line\">            Bucket: &apos;finpics-pics&apos;,</div><div class=\"line\">            Name: key</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">rekognition.indexFaces(params, function(err, data) &#123;</div><div class=\"line\">    if (err)  winston.error(err);</div><div class=\"line\">    callback(err, data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>When a user clicks on a face we search the Rekognition collection to find matches ordered by match probability.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var AWS = require(&apos;aws-sdk&apos;);</div><div class=\"line\">var rekognition = new AWS.Rekognition(&#123;apiVersion: &apos;2016-06-27&apos;&#125;);</div><div class=\"line\"></div><div class=\"line\">var params = &#123;</div><div class=\"line\">    CollectionId: &apos;finpics&apos;, /* required */</div><div class=\"line\">    FaceId: faceid</div><div class=\"line\">&#125;;</div><div class=\"line\">rekognition.searchFaces(params, function (err, data) &#123;</div><div class=\"line\">    if (err)  winston.error(err);</div><div class=\"line\">    callback(err, data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Lambda-Functions\"><a href=\"#Lambda-Functions\" class=\"headerlink\" title=\"Lambda Functions\"></a>Lambda Functions</h3><p>There are two Lambda functions:</p>\n<ol>\n<li>Search - search the Rekognition facial collection given a <code>faceid</code>.</li>\n<li>Process New Image - Triggered for each new image added to S3.<ul>\n<li>Creates a thumbnail</li>\n<li>Indexes the image within the Rekognition collection</li>\n<li>Adds image and metadata to DynamoDB</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://github.com/rgfindl/finpics/blob/master/lambda/index.js\" target=\"_blank\" rel=\"external\">Lambda functions</a></p>\n<h4 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h4><ol>\n<li>Search the Rekognition collection.</li>\n<li>Bulk fetch the images from DynamoDB.</li>\n<li>Normalize the DynamoDB results.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">search: function(event, context, callback) &#123;</div><div class=\"line\">    //</div><div class=\"line\">    // Search AWS Rekognition given the faceid.</div><div class=\"line\">    //</div><div class=\"line\">    var params = &#123;</div><div class=\"line\">      CollectionId: &apos;finpics&apos;, /* required */</div><div class=\"line\">      FaceId: event.faceid</div><div class=\"line\">    &#125;;</div><div class=\"line\">    rekognition.searchFaces(params, function (err, data) &#123;</div><div class=\"line\">      if (err) &#123;</div><div class=\"line\">        var response = &#123;</div><div class=\"line\">          statusCode: 500,</div><div class=\"line\">          err: err,</div><div class=\"line\">          params: params</div><div class=\"line\">        &#125;;</div><div class=\"line\">        callback(null, response);</div><div class=\"line\">      &#125; else &#123;</div><div class=\"line\">        //</div><div class=\"line\">        // For each face match.  Fetch the image information from DynamoDB.</div><div class=\"line\">        //</div><div class=\"line\">        var keys = [];</div><div class=\"line\">        var imageids = [];</div><div class=\"line\">        _.forEach(data.FaceMatches, function (FaceMatch) &#123;</div><div class=\"line\">          if (!_.includes(imageids, FaceMatch.Face.ImageId)) &#123;</div><div class=\"line\">            keys.push(&#123;&quot;image_id&quot;: &#123;&quot;S&quot;: FaceMatch.Face.ImageId&#125;&#125;);</div><div class=\"line\">            imageids.push(FaceMatch.Face.ImageId);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        var params = &#123;</div><div class=\"line\">          &quot;RequestItems&quot;: &#123;</div><div class=\"line\">            &quot;pics_by_image_id&quot;: &#123;</div><div class=\"line\">              &quot;Keys&quot;: _.slice(keys, 0, 100)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        dynamodb.batchGetItem(params, function (err, results) &#123;</div><div class=\"line\">          if (err) &#123;</div><div class=\"line\">            var response = &#123;</div><div class=\"line\">              statusCode: 500,</div><div class=\"line\">              err: err,</div><div class=\"line\">              params: params</div><div class=\"line\">            &#125;;</div><div class=\"line\">            callback(null, response);</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            //</div><div class=\"line\">            // Normalize the images we get back from the DynamoDB bulk get request.</div><div class=\"line\">            //</div><div class=\"line\">            var output = [];</div><div class=\"line\">            var imageids = [];</div><div class=\"line\">            _.forEach(data.FaceMatches, function (FaceMatch) &#123;</div><div class=\"line\">              if (!_.includes(imageids, FaceMatch.Face.ImageId)) &#123;</div><div class=\"line\">                var raw_item = _.find(results.Responses.pics_by_image_id, &#123;image_id: &#123;S: FaceMatch.Face.ImageId&#125;&#125;);</div><div class=\"line\">                if (!_.isNil(raw_item)) &#123;</div><div class=\"line\">                  var item = &#123;</div><div class=\"line\">                    image_id: raw_item.image_id.S,</div><div class=\"line\">                    image_path: raw_item.image_path.S</div><div class=\"line\">                  &#125;;</div><div class=\"line\">                  var faces = [];</div><div class=\"line\">                  _.forEach(raw_item.data.M.FaceRecords.L, function (FaceRecord) &#123;</div><div class=\"line\">                    faces.push(&#123;</div><div class=\"line\">                      Face: &#123;</div><div class=\"line\">                        Confidence: FaceRecord.M.Face.M.Confidence.N,</div><div class=\"line\">                        ImageId: FaceRecord.M.Face.M.ImageId.S,</div><div class=\"line\">                        BoundingBox: &#123;</div><div class=\"line\">                          Top: FaceRecord.M.Face.M.BoundingBox.M.Top.N,</div><div class=\"line\">                          Height: FaceRecord.M.Face.M.BoundingBox.M.Height.N,</div><div class=\"line\">                          Width: FaceRecord.M.Face.M.BoundingBox.M.Width.N,</div><div class=\"line\">                          Left: FaceRecord.M.Face.M.BoundingBox.M.Left.N</div><div class=\"line\">                        &#125;,</div><div class=\"line\">                        FaceId: FaceRecord.M.Face.M.FaceId.S,</div><div class=\"line\">                      &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                  &#125;);</div><div class=\"line\">                  item.data = &#123;</div><div class=\"line\">                    FaceRecords: faces</div><div class=\"line\">                  &#125;;</div><div class=\"line\">                  output.push(item);</div><div class=\"line\">                &#125;</div><div class=\"line\">                imageids.push(FaceMatch.Face.ImageId);</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            var response = &#123;</div><div class=\"line\">              statusCode: 200,</div><div class=\"line\">              output: output</div><div class=\"line\">            &#125;;</div><div class=\"line\">            callback(null, response);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Process-New-Image\"><a href=\"#Process-New-Image\" class=\"headerlink\" title=\"Process New Image\"></a>Process New Image</h4><ol>\n<li>Download image from S3 (finpics-pics)</li>\n<li>Create thumbnail</li>\n<li>Upload thumbnail to S3 (finpics-thumbs)</li>\n<li>Add feature picture for album, if needed</li>\n<li>Index image using Rekognition</li>\n<li>Add image and metadata to DynamoDB</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div></pre></td><td class=\"code\"><pre><div class=\"line\">s3: function(event, context, callback) &#123;</div><div class=\"line\"></div><div class=\"line\">  winston.info(&quot;Reading options from event:\\n&quot;, util.inspect(event, &#123;depth: 5&#125;));</div><div class=\"line\">  var srcBucket = event.Records[0].s3.bucket.name;</div><div class=\"line\">  // Object key may have spaces or unicode non-ASCII characters.</div><div class=\"line\">  var srcKey    =</div><div class=\"line\">      decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, &quot; &quot;));</div><div class=\"line\">  var dstBucket = S3_THUMBS_BUCKET;</div><div class=\"line\">  var dstKey    = srcKey;</div><div class=\"line\"></div><div class=\"line\">  // Sanity check: validate that source and destination are different buckets.</div><div class=\"line\">  if (srcBucket == dstBucket) &#123;</div><div class=\"line\">    callback(&quot;Source and destination buckets are the same.&quot;);</div><div class=\"line\">    return;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Infer the image type.</div><div class=\"line\">  var typeMatch = srcKey.match(/\\.([^.]*)$/);</div><div class=\"line\">  if (!typeMatch) &#123;</div><div class=\"line\">    callback(&quot;Could not determine the image type.&quot;);</div><div class=\"line\">    return;</div><div class=\"line\">  &#125;</div><div class=\"line\">  var imageType = _.toLower(typeMatch[1]);</div><div class=\"line\">  if (imageType != &quot;jpg&quot; &amp;&amp; imageType != &quot;jpeg&quot; &amp;&amp; imageType != &quot;png&quot;) &#123;</div><div class=\"line\">    callback(&apos;Unsupported image type: $&#123;imageType&#125;&apos;);</div><div class=\"line\">    return;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Download the image from S3, transform, and upload to a different S3 bucket.</div><div class=\"line\">  async.waterfall([</div><div class=\"line\">        function download(next) &#123;</div><div class=\"line\">          // Download the image from S3 into a buffer.</div><div class=\"line\">          s3.getObject(&#123;</div><div class=\"line\">                Bucket: srcBucket,</div><div class=\"line\">                Key: srcKey</div><div class=\"line\">              &#125;,</div><div class=\"line\">              next);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function transform(response, next) &#123;</div><div class=\"line\">          gm(response.Body).size(function(err, size) &#123;</div><div class=\"line\">            // Infer the scaling factor to avoid stretching the image unnaturally.</div><div class=\"line\">            var scalingFactor = Math.min(</div><div class=\"line\">                MAX_WIDTH / size.width,</div><div class=\"line\">                MAX_HEIGHT / size.height</div><div class=\"line\">            );</div><div class=\"line\">            var width  = scalingFactor * size.width;</div><div class=\"line\">            var height = scalingFactor * size.height;</div><div class=\"line\"></div><div class=\"line\">            // Transform the image buffer in memory.</div><div class=\"line\">            this.resize(width, height).autoOrient()</div><div class=\"line\">                .toBuffer(imageType, function(err, buffer) &#123;</div><div class=\"line\">                  if (err) &#123;</div><div class=\"line\">                    next(err);</div><div class=\"line\">                  &#125; else &#123;</div><div class=\"line\">                    next(null, response.ContentType, buffer);</div><div class=\"line\">                  &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function upload(contentType, data, next) &#123;</div><div class=\"line\">          // Stream the transformed image to a different S3 bucket.</div><div class=\"line\">          s3.putObject(&#123;</div><div class=\"line\">                Bucket: dstBucket,</div><div class=\"line\">                Key: dstKey,</div><div class=\"line\">                Body: data,</div><div class=\"line\">                ContentType: contentType,</div><div class=\"line\">                StorageClass: &apos;REDUCED_REDUNDANCY&apos;</div><div class=\"line\">              &#125;,</div><div class=\"line\">              next);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function add_feature_pic(response, next) &#123;</div><div class=\"line\">          var image_parts = _.drop(_.split(srcKey, &apos;/&apos;));</div><div class=\"line\">          var params = &#123;</div><div class=\"line\">            TableName: &apos;pics&apos;,</div><div class=\"line\">            Key: &#123;</div><div class=\"line\">              primarykey: &apos;/&apos;,</div><div class=\"line\">              sortkey: _.head(image_parts)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            UpdateExpression: &quot;set pic = :pic&quot;,</div><div class=\"line\">            ConditionExpression: &quot;attribute_not_exists(pic)&quot;,</div><div class=\"line\">            ExpressionAttributeValues:&#123;</div><div class=\"line\">              &apos;:pic&apos;: _.last(image_parts)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\">          winston.info(JSON.stringify(params));</div><div class=\"line\">          docClient.update(params, function(err, results) &#123;</div><div class=\"line\">            if (err &amp;&amp; _.isEqual(err.code, &apos;ConditionalCheckFailedException&apos;)) next(null, null);</div><div class=\"line\">            else next(err, results);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function rekognize(response, next) &#123;</div><div class=\"line\">          var params = &#123;</div><div class=\"line\">            CollectionId: COLLECTION_ID, /* required */</div><div class=\"line\">            Image: &#123; /* required */</div><div class=\"line\">              S3Object: &#123;</div><div class=\"line\">                Bucket: srcBucket,</div><div class=\"line\">                Name: srcKey</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\">          winston.info(&apos;Index faces&apos;);</div><div class=\"line\">          winston.info(JSON.stringify(params));</div><div class=\"line\">          rekognition.indexFaces(params, next);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function add_pics(data, next) &#123;</div><div class=\"line\">          var image_parts = _.drop(_.split(srcKey, &apos;/&apos;));</div><div class=\"line\">          var item = &#123;</div><div class=\"line\">            primarykey: _.head(image_parts),</div><div class=\"line\">            sortkey: _.nth(image_parts, 1),</div><div class=\"line\">            data: data</div><div class=\"line\">          &#125;;</div><div class=\"line\">          var params = &#123;</div><div class=\"line\">            TableName: &apos;pics&apos;,</div><div class=\"line\">            Item: item</div><div class=\"line\">          &#125;;</div><div class=\"line\">          winston.info(&apos;Put DynamoDB&apos;);</div><div class=\"line\">          winston.info(JSON.stringify(params));</div><div class=\"line\">          docClient.put(params, function(err, respose) &#123;</div><div class=\"line\">            if (err)  winston.error(err);</div><div class=\"line\">            next(err, data);</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        function add_pics_by_image_id(data, next) &#123;</div><div class=\"line\">          if (!_.isNil(data) &amp;&amp; !_.isNil(data.FaceRecords) &amp;&amp; !_.isEmpty(data.FaceRecords) &amp;&amp;</div><div class=\"line\">              !_.isNil(data.FaceRecords[0].Face) &amp;&amp; !_.isNil(data.FaceRecords[0].Face.ImageId)) &#123;</div><div class=\"line\">            var image_parts = _.drop(_.split(srcKey, &apos;/&apos;));</div><div class=\"line\">            var item = &#123;</div><div class=\"line\">              image_id: data.FaceRecords[0].Face.ImageId,</div><div class=\"line\">              data: data,</div><div class=\"line\">              image_path: _.join(image_parts, &apos;/&apos;)</div><div class=\"line\">            &#125;;</div><div class=\"line\">            var params = &#123;</div><div class=\"line\">              TableName: &apos;pics_by_image_id&apos;,</div><div class=\"line\">              Item: item</div><div class=\"line\">            &#125;;</div><div class=\"line\">            winston.info(&apos;Put DynamoDB&apos;);</div><div class=\"line\">            winston.info(JSON.stringify(params));</div><div class=\"line\">            docClient.put(params, next);</div><div class=\"line\">          &#125; else next(null, null);</div><div class=\"line\">        &#125;</div><div class=\"line\">      ], function (err) &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">          winston.error(</div><div class=\"line\">              &apos;Unable to resize &apos; + srcBucket + &apos;/&apos; + srcKey +</div><div class=\"line\">              &apos; and upload to &apos; + dstBucket + &apos;/&apos; + dstKey +</div><div class=\"line\">              &apos; due to an error: &apos; + err</div><div class=\"line\">          );</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">          winston.info(</div><div class=\"line\">              &apos;Successfully resized &apos; + srcBucket + &apos;/&apos; + srcKey +</div><div class=\"line\">              &apos; and uploaded to &apos; + dstBucket + &apos;/&apos; + dstKey</div><div class=\"line\">          );</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        callback(null, &quot;message&quot;);</div><div class=\"line\">      &#125;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Thanks for reading my blog post.  Please let me know if you have any questions.</p>\n<p>Here is the <a href=\"https://github.com/rgfindl/finpics\" target=\"_blank\" rel=\"external\">source code</a>.<br>Here is the <a href=\"http://finpics.com\" target=\"_blank\" rel=\"external\">demo (finpics.com)</a>.</p>\n<p>There are a bunch of untilities <a href=\"https://github.com/rgfindl/finpics/blob/master/util\" target=\"_blank\" rel=\"external\">here</a>.  I had a lot of images already that I had to process using <a href=\"https://github.com/rgfindl/finpics/blob/master/util/process-existing-images.js\" target=\"_blank\" rel=\"external\">this script</a>.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj63lyzjy00019hftfnqxoqve","tag_id":"cj63lyzk200029hfta9syyal8","_id":"cj63lyzk500039hft8ik4eke9"}],"Tag":[{"name":"aws, rekognition, photo, album, lambda, cognito, facebook, s3, route53, dynamodb, serverless","_id":"cj63lyzk200029hfta9syyal8"}]}}